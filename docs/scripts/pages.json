[{"name":"abstract val body: ByteArray","description":"io.river.connector.amqp.Message.body","location":"connectors/amqp/io.river.connector.amqp/-message/body.html","searchKeys":["body","abstract val body: ByteArray","io.river.connector.amqp.Message.body"]},{"name":"abstract val body: ByteArray","description":"io.river.connector.amqp.ReceivingMessage.body","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/body.html","searchKeys":["body","abstract val body: ByteArray","io.river.connector.amqp.ReceivingMessage.body"]},{"name":"abstract val consumerTag: String","description":"io.river.connector.amqp.ReceivingMessage.consumerTag","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/consumer-tag.html","searchKeys":["consumerTag","abstract val consumerTag: String","io.river.connector.amqp.ReceivingMessage.consumerTag"]},{"name":"abstract val envelope: Envelope","description":"io.river.connector.amqp.ReceivingMessage.envelope","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/envelope.html","searchKeys":["envelope","abstract val envelope: Envelope","io.river.connector.amqp.ReceivingMessage.envelope"]},{"name":"abstract val immediate: Boolean","description":"io.river.connector.amqp.Message.immediate","location":"connectors/amqp/io.river.connector.amqp/-message/immediate.html","searchKeys":["immediate","abstract val immediate: Boolean","io.river.connector.amqp.Message.immediate"]},{"name":"abstract val mandatory: Boolean","description":"io.river.connector.amqp.Message.mandatory","location":"connectors/amqp/io.river.connector.amqp/-message/mandatory.html","searchKeys":["mandatory","abstract val mandatory: Boolean","io.river.connector.amqp.Message.mandatory"]},{"name":"abstract val properties: AMQP.BasicProperties","description":"io.river.connector.amqp.Message.properties","location":"connectors/amqp/io.river.connector.amqp/-message/properties.html","searchKeys":["properties","abstract val properties: AMQP.BasicProperties","io.river.connector.amqp.Message.properties"]},{"name":"abstract val properties: AMQP.BasicProperties","description":"io.river.connector.amqp.ReceivingMessage.properties","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/properties.html","searchKeys":["properties","abstract val properties: AMQP.BasicProperties","io.river.connector.amqp.ReceivingMessage.properties"]},{"name":"data class AutoAck(val consumerTag: String, val envelope: Envelope, val properties: AMQP.BasicProperties, val body: ByteArray) : ReceivingMessage","description":"io.river.connector.amqp.ReceivingMessage.AutoAck","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/-auto-ack/index.html","searchKeys":["AutoAck","data class AutoAck(val consumerTag: String, val envelope: Envelope, val properties: AMQP.BasicProperties, val body: ByteArray) : ReceivingMessage","io.river.connector.amqp.ReceivingMessage.AutoAck"]},{"name":"data class Default(val exchange: String, val routingKey: String, val body: ByteArray, val properties: AMQP.BasicProperties = AMQP.BasicProperties(), val mandatory: Boolean = false, val immediate: Boolean = false) : Message","description":"io.river.connector.amqp.Message.Default","location":"connectors/amqp/io.river.connector.amqp/-message/-default/index.html","searchKeys":["Default","data class Default(val exchange: String, val routingKey: String, val body: ByteArray, val properties: AMQP.BasicProperties = AMQP.BasicProperties(), val mandatory: Boolean = false, val immediate: Boolean = false) : Message","io.river.connector.amqp.Message.Default"]},{"name":"data class ManualAck(val consumerTag: String, val envelope: Envelope, val properties: AMQP.BasicProperties, val body: ByteArray, channel: Channel) : ReceivingMessage","description":"io.river.connector.amqp.ReceivingMessage.ManualAck","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/-manual-ack/index.html","searchKeys":["ManualAck","data class ManualAck(val consumerTag: String, val envelope: Envelope, val properties: AMQP.BasicProperties, val body: ByteArray, channel: Channel) : ReceivingMessage","io.river.connector.amqp.ReceivingMessage.ManualAck"]},{"name":"data class Simple(val body: ByteArray, val properties: AMQP.BasicProperties = AMQP.BasicProperties(), val mandatory: Boolean = false, val immediate: Boolean = false)","description":"io.river.connector.amqp.Message.Simple","location":"connectors/amqp/io.river.connector.amqp/-message/-simple/index.html","searchKeys":["Simple","data class Simple(val body: ByteArray, val properties: AMQP.BasicProperties = AMQP.BasicProperties(), val mandatory: Boolean = false, val immediate: Boolean = false)","io.river.connector.amqp.Message.Simple"]},{"name":"fun <T> Connection.withChannel(f: Channel.() -> T): T","description":"io.river.connector.amqp.withChannel","location":"connectors/amqp/io.river.connector.amqp/with-channel.html","searchKeys":["withChannel","fun <T> Connection.withChannel(f: Channel.() -> T): T","io.river.connector.amqp.withChannel"]},{"name":"fun AutoAck(consumerTag: String, envelope: Envelope, properties: AMQP.BasicProperties, body: ByteArray)","description":"io.river.connector.amqp.ReceivingMessage.AutoAck.AutoAck","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/-auto-ack/-auto-ack.html","searchKeys":["AutoAck","fun AutoAck(consumerTag: String, envelope: Envelope, properties: AMQP.BasicProperties, body: ByteArray)","io.river.connector.amqp.ReceivingMessage.AutoAck.AutoAck"]},{"name":"fun Channel.publishFlow(exchange: String, routingKey: String, upstream: Flow<Message.Simple>): Flow<Unit>","description":"io.river.connector.amqp.publishFlow","location":"connectors/amqp/io.river.connector.amqp/publish-flow.html","searchKeys":["publishFlow","fun Channel.publishFlow(exchange: String, routingKey: String, upstream: Flow<Message.Simple>): Flow<Unit>","io.river.connector.amqp.publishFlow"]},{"name":"fun Channel.publishFlow(upstream: Flow<Message.Default>): Flow<Unit>","description":"io.river.connector.amqp.publishFlow","location":"connectors/amqp/io.river.connector.amqp/publish-flow.html","searchKeys":["publishFlow","fun Channel.publishFlow(upstream: Flow<Message.Default>): Flow<Unit>","io.river.connector.amqp.publishFlow"]},{"name":"fun Connection.autoAckConsume(queue: String, prefetch: Int = 100): Flow<ReceivingMessage.AutoAck>","description":"io.river.connector.amqp.autoAckConsume","location":"connectors/amqp/io.river.connector.amqp/auto-ack-consume.html","searchKeys":["autoAckConsume","fun Connection.autoAckConsume(queue: String, prefetch: Int = 100): Flow<ReceivingMessage.AutoAck>","io.river.connector.amqp.autoAckConsume"]},{"name":"fun Connection.consume(queue: String, prefetch: Int = 100): Flow<ReceivingMessage.ManualAck>","description":"io.river.connector.amqp.consume","location":"connectors/amqp/io.river.connector.amqp/consume.html","searchKeys":["consume","fun Connection.consume(queue: String, prefetch: Int = 100): Flow<ReceivingMessage.ManualAck>","io.river.connector.amqp.consume"]},{"name":"fun Connection.publishFlow(exchange: String, routingKey: String, upstream: Flow<Message.Simple>): Flow<Unit>","description":"io.river.connector.amqp.publishFlow","location":"connectors/amqp/io.river.connector.amqp/publish-flow.html","searchKeys":["publishFlow","fun Connection.publishFlow(exchange: String, routingKey: String, upstream: Flow<Message.Simple>): Flow<Unit>","io.river.connector.amqp.publishFlow"]},{"name":"fun ConnectionFactory.connection(name: String? = null): Connection","description":"io.river.connector.amqp.connection","location":"connectors/amqp/io.river.connector.amqp/connection.html","searchKeys":["connection","fun ConnectionFactory.connection(name: String? = null): Connection","io.river.connector.amqp.connection"]},{"name":"fun Default(exchange: String, routingKey: String, body: ByteArray, properties: AMQP.BasicProperties = AMQP.BasicProperties(), mandatory: Boolean = false, immediate: Boolean = false)","description":"io.river.connector.amqp.Message.Default.Default","location":"connectors/amqp/io.river.connector.amqp/-message/-default/-default.html","searchKeys":["Default","fun Default(exchange: String, routingKey: String, body: ByteArray, properties: AMQP.BasicProperties = AMQP.BasicProperties(), mandatory: Boolean = false, immediate: Boolean = false)","io.river.connector.amqp.Message.Default.Default"]},{"name":"fun ManualAck(consumerTag: String, envelope: Envelope, properties: AMQP.BasicProperties, body: ByteArray, channel: Channel)","description":"io.river.connector.amqp.ReceivingMessage.ManualAck.ManualAck","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/-manual-ack/-manual-ack.html","searchKeys":["ManualAck","fun ManualAck(consumerTag: String, envelope: Envelope, properties: AMQP.BasicProperties, body: ByteArray, channel: Channel)","io.river.connector.amqp.ReceivingMessage.ManualAck.ManualAck"]},{"name":"fun Simple(body: ByteArray, properties: AMQP.BasicProperties = AMQP.BasicProperties(), mandatory: Boolean = false, immediate: Boolean = false)","description":"io.river.connector.amqp.Message.Simple.Simple","location":"connectors/amqp/io.river.connector.amqp/-message/-simple/-simple.html","searchKeys":["Simple","fun Simple(body: ByteArray, properties: AMQP.BasicProperties = AMQP.BasicProperties(), mandatory: Boolean = false, immediate: Boolean = false)","io.river.connector.amqp.Message.Simple.Simple"]},{"name":"fun ack()","description":"io.river.connector.amqp.ReceivingMessage.ManualAck.ack","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/-manual-ack/ack.html","searchKeys":["ack","fun ack()","io.river.connector.amqp.ReceivingMessage.ManualAck.ack"]},{"name":"fun asDefault(exchange: String, routingKey: String): Message.Default","description":"io.river.connector.amqp.Message.Simple.asDefault","location":"connectors/amqp/io.river.connector.amqp/-message/-simple/as-default.html","searchKeys":["asDefault","fun asDefault(exchange: String, routingKey: String): Message.Default","io.river.connector.amqp.Message.Simple.asDefault"]},{"name":"fun nack(requeue: Boolean = true)","description":"io.river.connector.amqp.ReceivingMessage.ManualAck.nack","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/-manual-ack/nack.html","searchKeys":["nack","fun nack(requeue: Boolean = true)","io.river.connector.amqp.ReceivingMessage.ManualAck.nack"]},{"name":"fun nonBlockingConnectionFactory(threadNumber: Int = 1, f: ConnectionFactory.() -> Unit): ConnectionFactory","description":"io.river.connector.amqp.nonBlockingConnectionFactory","location":"connectors/amqp/io.river.connector.amqp/non-blocking-connection-factory.html","searchKeys":["nonBlockingConnectionFactory","fun nonBlockingConnectionFactory(threadNumber: Int = 1, f: ConnectionFactory.() -> Unit): ConnectionFactory","io.river.connector.amqp.nonBlockingConnectionFactory"]},{"name":"interface Message","description":"io.river.connector.amqp.Message","location":"connectors/amqp/io.river.connector.amqp/-message/index.html","searchKeys":["Message","interface Message","io.river.connector.amqp.Message"]},{"name":"interface ReceivingMessage","description":"io.river.connector.amqp.ReceivingMessage","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/index.html","searchKeys":["ReceivingMessage","interface ReceivingMessage","io.river.connector.amqp.ReceivingMessage"]},{"name":"open fun bodyAsString(charset: Charset = Charset.defaultCharset()): String","description":"io.river.connector.amqp.ReceivingMessage.bodyAsString","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/body-as-string.html","searchKeys":["bodyAsString","open fun bodyAsString(charset: Charset = Charset.defaultCharset()): String","io.river.connector.amqp.ReceivingMessage.bodyAsString"]},{"name":"open override val body: ByteArray","description":"io.river.connector.amqp.Message.Default.body","location":"connectors/amqp/io.river.connector.amqp/-message/-default/body.html","searchKeys":["body","open override val body: ByteArray","io.river.connector.amqp.Message.Default.body"]},{"name":"open override val body: ByteArray","description":"io.river.connector.amqp.ReceivingMessage.AutoAck.body","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/-auto-ack/body.html","searchKeys":["body","open override val body: ByteArray","io.river.connector.amqp.ReceivingMessage.AutoAck.body"]},{"name":"open override val body: ByteArray","description":"io.river.connector.amqp.ReceivingMessage.ManualAck.body","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/-manual-ack/body.html","searchKeys":["body","open override val body: ByteArray","io.river.connector.amqp.ReceivingMessage.ManualAck.body"]},{"name":"open override val consumerTag: String","description":"io.river.connector.amqp.ReceivingMessage.AutoAck.consumerTag","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/-auto-ack/consumer-tag.html","searchKeys":["consumerTag","open override val consumerTag: String","io.river.connector.amqp.ReceivingMessage.AutoAck.consumerTag"]},{"name":"open override val consumerTag: String","description":"io.river.connector.amqp.ReceivingMessage.ManualAck.consumerTag","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/-manual-ack/consumer-tag.html","searchKeys":["consumerTag","open override val consumerTag: String","io.river.connector.amqp.ReceivingMessage.ManualAck.consumerTag"]},{"name":"open override val envelope: Envelope","description":"io.river.connector.amqp.ReceivingMessage.AutoAck.envelope","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/-auto-ack/envelope.html","searchKeys":["envelope","open override val envelope: Envelope","io.river.connector.amqp.ReceivingMessage.AutoAck.envelope"]},{"name":"open override val envelope: Envelope","description":"io.river.connector.amqp.ReceivingMessage.ManualAck.envelope","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/-manual-ack/envelope.html","searchKeys":["envelope","open override val envelope: Envelope","io.river.connector.amqp.ReceivingMessage.ManualAck.envelope"]},{"name":"open override val immediate: Boolean = false","description":"io.river.connector.amqp.Message.Default.immediate","location":"connectors/amqp/io.river.connector.amqp/-message/-default/immediate.html","searchKeys":["immediate","open override val immediate: Boolean = false","io.river.connector.amqp.Message.Default.immediate"]},{"name":"open override val mandatory: Boolean = false","description":"io.river.connector.amqp.Message.Default.mandatory","location":"connectors/amqp/io.river.connector.amqp/-message/-default/mandatory.html","searchKeys":["mandatory","open override val mandatory: Boolean = false","io.river.connector.amqp.Message.Default.mandatory"]},{"name":"open override val properties: AMQP.BasicProperties","description":"io.river.connector.amqp.Message.Default.properties","location":"connectors/amqp/io.river.connector.amqp/-message/-default/properties.html","searchKeys":["properties","open override val properties: AMQP.BasicProperties","io.river.connector.amqp.Message.Default.properties"]},{"name":"open override val properties: AMQP.BasicProperties","description":"io.river.connector.amqp.ReceivingMessage.AutoAck.properties","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/-auto-ack/properties.html","searchKeys":["properties","open override val properties: AMQP.BasicProperties","io.river.connector.amqp.ReceivingMessage.AutoAck.properties"]},{"name":"open override val properties: AMQP.BasicProperties","description":"io.river.connector.amqp.ReceivingMessage.ManualAck.properties","location":"connectors/amqp/io.river.connector.amqp/-receiving-message/-manual-ack/properties.html","searchKeys":["properties","open override val properties: AMQP.BasicProperties","io.river.connector.amqp.ReceivingMessage.ManualAck.properties"]},{"name":"val body: ByteArray","description":"io.river.connector.amqp.Message.Simple.body","location":"connectors/amqp/io.river.connector.amqp/-message/-simple/body.html","searchKeys":["body","val body: ByteArray","io.river.connector.amqp.Message.Simple.body"]},{"name":"val exchange: String","description":"io.river.connector.amqp.Message.Default.exchange","location":"connectors/amqp/io.river.connector.amqp/-message/-default/exchange.html","searchKeys":["exchange","val exchange: String","io.river.connector.amqp.Message.Default.exchange"]},{"name":"val immediate: Boolean = false","description":"io.river.connector.amqp.Message.Simple.immediate","location":"connectors/amqp/io.river.connector.amqp/-message/-simple/immediate.html","searchKeys":["immediate","val immediate: Boolean = false","io.river.connector.amqp.Message.Simple.immediate"]},{"name":"val mandatory: Boolean = false","description":"io.river.connector.amqp.Message.Simple.mandatory","location":"connectors/amqp/io.river.connector.amqp/-message/-simple/mandatory.html","searchKeys":["mandatory","val mandatory: Boolean = false","io.river.connector.amqp.Message.Simple.mandatory"]},{"name":"val properties: AMQP.BasicProperties","description":"io.river.connector.amqp.Message.Simple.properties","location":"connectors/amqp/io.river.connector.amqp/-message/-simple/properties.html","searchKeys":["properties","val properties: AMQP.BasicProperties","io.river.connector.amqp.Message.Simple.properties"]},{"name":"val routingKey: String","description":"io.river.connector.amqp.Message.Default.routingKey","location":"connectors/amqp/io.river.connector.amqp/-message/-default/routing-key.html","searchKeys":["routingKey","val routingKey: String","io.river.connector.amqp.Message.Default.routingKey"]},{"name":"fun PublishRequestEntry(message: String, messageAttributes: Map<String, MessageAttributeValue> = emptyMap(), id: String = UUID.randomUUID().toString()): PublishBatchRequestEntry","description":"io.river.connector.aws.sns.PublishRequestEntry","location":"connectors/aws/sns/io.river.connector.aws.sns/-publish-request-entry.html","searchKeys":["PublishRequestEntry","fun PublishRequestEntry(message: String, messageAttributes: Map<String, MessageAttributeValue> = emptyMap(), id: String = UUID.randomUUID().toString()): PublishBatchRequestEntry","io.river.connector.aws.sns.PublishRequestEntry"]},{"name":"fun SnsAsyncClient.publishFlow(topicArn: String, upstream: Flow<PublishBatchRequestEntry>, parallelism: Int = 1, chunkStrategy: ChunkStrategy = ChunkStrategy.TimeWindow(10, 250.milliseconds)): Flow<PublishBatchResponse>","description":"io.river.connector.aws.sns.publishFlow","location":"connectors/aws/sns/io.river.connector.aws.sns/publish-flow.html","searchKeys":["publishFlow","fun SnsAsyncClient.publishFlow(topicArn: String, upstream: Flow<PublishBatchRequestEntry>, parallelism: Int = 1, chunkStrategy: ChunkStrategy = ChunkStrategy.TimeWindow(10, 250.milliseconds)): Flow<PublishBatchResponse>","io.river.connector.aws.sns.publishFlow"]},{"name":"fun LambdaAsyncClient.invokeFlow(functionName: String, upstream: Flow<String>, invocationType: InvocationType = InvocationType.REQUEST_RESPONSE, logType: LogType? = null, qualifier: String? = null, clientContext: String? = null, parallelism: Int = 1): Flow<InvokeResponse>","description":"io.river.connector.aws.lambda.invokeFlow","location":"connectors/aws/lambda/io.river.connector.aws.lambda/invoke-flow.html","searchKeys":["invokeFlow","fun LambdaAsyncClient.invokeFlow(functionName: String, upstream: Flow<String>, invocationType: InvocationType = InvocationType.REQUEST_RESPONSE, logType: LogType? = null, qualifier: String? = null, clientContext: String? = null, parallelism: Int = 1): Flow<InvokeResponse>","io.river.connector.aws.lambda.invokeFlow"]},{"name":"data class SendMessageRequest(val text: String, val visibilityTimeout: Duration? = null, val ttl: Duration? = null)","description":"io.river.connector.azure.queue.storage.model.SendMessageRequest","location":"connectors/azure/queue-storage/io.river.connector.azure.queue.storage.model/-send-message-request/index.html","searchKeys":["SendMessageRequest","data class SendMessageRequest(val text: String, val visibilityTimeout: Duration? = null, val ttl: Duration? = null)","io.river.connector.azure.queue.storage.model.SendMessageRequest"]},{"name":"fun QueueAsyncClient.deleteMessagesFlow(upstream: Flow<QueueMessageItem>, parallelism: Int = 100): Flow<Unit>","description":"io.river.connector.azure.queue.storage.deleteMessagesFlow","location":"connectors/azure/queue-storage/io.river.connector.azure.queue.storage/delete-messages-flow.html","searchKeys":["deleteMessagesFlow","fun QueueAsyncClient.deleteMessagesFlow(upstream: Flow<QueueMessageItem>, parallelism: Int = 100): Flow<Unit>","io.river.connector.azure.queue.storage.deleteMessagesFlow"]},{"name":"fun QueueAsyncClient.receiveMessagesAsFlow(maxParallelism: Int = 1, pollSize: Int = 32, visibilityTimeout: Duration = 30.seconds, stopOnEmptyList: Boolean = false, minimumParallelism: Int = 1, increaseStrategy: ParallelismIncreaseStrategy = ParallelismIncreaseStrategy.ByOne): Flow<QueueMessageItem>","description":"io.river.connector.azure.queue.storage.receiveMessagesAsFlow","location":"connectors/azure/queue-storage/io.river.connector.azure.queue.storage/receive-messages-as-flow.html","searchKeys":["receiveMessagesAsFlow","fun QueueAsyncClient.receiveMessagesAsFlow(maxParallelism: Int = 1, pollSize: Int = 32, visibilityTimeout: Duration = 30.seconds, stopOnEmptyList: Boolean = false, minimumParallelism: Int = 1, increaseStrategy: ParallelismIncreaseStrategy = ParallelismIncreaseStrategy.ByOne): Flow<QueueMessageItem>","io.river.connector.azure.queue.storage.receiveMessagesAsFlow"]},{"name":"fun QueueAsyncClient.sendMessagesFlow(upstream: Flow<SendMessageRequest>, parallelism: Int = 100): Flow<SendMessageResult>","description":"io.river.connector.azure.queue.storage.sendMessagesFlow","location":"connectors/azure/queue-storage/io.river.connector.azure.queue.storage/send-messages-flow.html","searchKeys":["sendMessagesFlow","fun QueueAsyncClient.sendMessagesFlow(upstream: Flow<SendMessageRequest>, parallelism: Int = 100): Flow<SendMessageResult>","io.river.connector.azure.queue.storage.sendMessagesFlow"]},{"name":"fun SendMessageRequest(text: String, visibilityTimeout: Duration? = null, ttl: Duration? = null)","description":"io.river.connector.azure.queue.storage.model.SendMessageRequest.SendMessageRequest","location":"connectors/azure/queue-storage/io.river.connector.azure.queue.storage.model/-send-message-request/-send-message-request.html","searchKeys":["SendMessageRequest","fun SendMessageRequest(text: String, visibilityTimeout: Duration? = null, ttl: Duration? = null)","io.river.connector.azure.queue.storage.model.SendMessageRequest.SendMessageRequest"]},{"name":"val text: String","description":"io.river.connector.azure.queue.storage.model.SendMessageRequest.text","location":"connectors/azure/queue-storage/io.river.connector.azure.queue.storage.model/-send-message-request/text.html","searchKeys":["text","val text: String","io.river.connector.azure.queue.storage.model.SendMessageRequest.text"]},{"name":"val ttl: Duration? = null","description":"io.river.connector.azure.queue.storage.model.SendMessageRequest.ttl","location":"connectors/azure/queue-storage/io.river.connector.azure.queue.storage.model/-send-message-request/ttl.html","searchKeys":["ttl","val ttl: Duration? = null","io.river.connector.azure.queue.storage.model.SendMessageRequest.ttl"]},{"name":"val visibilityTimeout: Duration? = null","description":"io.river.connector.azure.queue.storage.model.SendMessageRequest.visibilityTimeout","location":"connectors/azure/queue-storage/io.river.connector.azure.queue.storage.model/-send-message-request/visibility-timeout.html","searchKeys":["visibilityTimeout","val visibilityTimeout: Duration? = null","io.river.connector.azure.queue.storage.model.SendMessageRequest.visibilityTimeout"]},{"name":"class TwilioConfiguration(val accountSid: String, val authToken: String, val baseUrl: String = BaseUrl)","description":"io.river.connector.twilio.model.TwilioConfiguration","location":"connectors/twilio/io.river.connector.twilio.model/-twilio-configuration/index.html","searchKeys":["TwilioConfiguration","class TwilioConfiguration(val accountSid: String, val authToken: String, val baseUrl: String = BaseUrl)","io.river.connector.twilio.model.TwilioConfiguration"]},{"name":"class TwilioMessageHttpApi(val configuration: TwilioConfiguration, val objectMapper: ObjectMapper = jacksonObjectMapper(), val httpClient: HttpClient = HttpClient.newHttpClient())","description":"io.river.connector.twilio.TwilioMessageHttpApi","location":"connectors/twilio/io.river.connector.twilio/-twilio-message-http-api/index.html","searchKeys":["TwilioMessageHttpApi","class TwilioMessageHttpApi(val configuration: TwilioConfiguration, val objectMapper: ObjectMapper = jacksonObjectMapper(), val httpClient: HttpClient = HttpClient.newHttpClient())","io.river.connector.twilio.TwilioMessageHttpApi"]},{"name":"const val BaseUrl: String","description":"io.river.connector.twilio.model.TwilioConfiguration.Companion.BaseUrl","location":"connectors/twilio/io.river.connector.twilio.model/-twilio-configuration/-companion/-base-url.html","searchKeys":["BaseUrl","const val BaseUrl: String","io.river.connector.twilio.model.TwilioConfiguration.Companion.BaseUrl"]},{"name":"data class CreateMessage(val body: String, val messagingServiceSid: String, val to: Destination, val shortenUrls: Boolean = true)","description":"io.river.connector.twilio.model.CreateMessage","location":"connectors/twilio/io.river.connector.twilio.model/-create-message/index.html","searchKeys":["CreateMessage","data class CreateMessage(val body: String, val messagingServiceSid: String, val to: Destination, val shortenUrls: Boolean = true)","io.river.connector.twilio.model.CreateMessage"]},{"name":"data class Message(val accountSid: String, val apiVersion: String, val body: String, val dateCreated: String, val dateSent: String, val dateUpdated: String, val direction: String, val errorCode: Any, val errorMessage: Any, val from: String, val messagingServiceSid: String, val numMedia: String, val numSegments: String, val price: Any, val priceUnit: Any, val sid: String, val status: String, val subresourceUris: Message.SubresourceUris, val to: String, val uri: String)","description":"io.river.connector.twilio.model.Message","location":"connectors/twilio/io.river.connector.twilio.model/-message/index.html","searchKeys":["Message","data class Message(val accountSid: String, val apiVersion: String, val body: String, val dateCreated: String, val dateSent: String, val dateUpdated: String, val direction: String, val errorCode: Any, val errorMessage: Any, val from: String, val messagingServiceSid: String, val numMedia: String, val numSegments: String, val price: Any, val priceUnit: Any, val sid: String, val status: String, val subresourceUris: Message.SubresourceUris, val to: String, val uri: String)","io.river.connector.twilio.model.Message"]},{"name":"data class Sms(val number: String) : Destination","description":"io.river.connector.twilio.model.Destination.Sms","location":"connectors/twilio/io.river.connector.twilio.model/-destination/-sms/index.html","searchKeys":["Sms","data class Sms(val number: String) : Destination","io.river.connector.twilio.model.Destination.Sms"]},{"name":"data class SubresourceUris(val media: String)","description":"io.river.connector.twilio.model.Message.SubresourceUris","location":"connectors/twilio/io.river.connector.twilio.model/-message/-subresource-uris/index.html","searchKeys":["SubresourceUris","data class SubresourceUris(val media: String)","io.river.connector.twilio.model.Message.SubresourceUris"]},{"name":"data class Whatsapp(val number: String) : Destination","description":"io.river.connector.twilio.model.Destination.Whatsapp","location":"connectors/twilio/io.river.connector.twilio.model/-destination/-whatsapp/index.html","searchKeys":["Whatsapp","data class Whatsapp(val number: String) : Destination","io.river.connector.twilio.model.Destination.Whatsapp"]},{"name":"fun CreateMessage(body: String, messagingServiceSid: String, to: Destination, shortenUrls: Boolean = true)","description":"io.river.connector.twilio.model.CreateMessage.CreateMessage","location":"connectors/twilio/io.river.connector.twilio.model/-create-message/-create-message.html","searchKeys":["CreateMessage","fun CreateMessage(body: String, messagingServiceSid: String, to: Destination, shortenUrls: Boolean = true)","io.river.connector.twilio.model.CreateMessage.CreateMessage"]},{"name":"fun CreateMessage.asHttpRequest(uri: String, authorization: String): HttpRequest","description":"io.river.connector.twilio.model.asHttpRequest","location":"connectors/twilio/io.river.connector.twilio.model/as-http-request.html","searchKeys":["asHttpRequest","fun CreateMessage.asHttpRequest(uri: String, authorization: String): HttpRequest","io.river.connector.twilio.model.asHttpRequest"]},{"name":"fun Message(accountSid: String, apiVersion: String, body: String, dateCreated: String, dateSent: String, dateUpdated: String, direction: String, errorCode: Any, errorMessage: Any, from: String, messagingServiceSid: String, numMedia: String, numSegments: String, price: Any, priceUnit: Any, sid: String, status: String, subresourceUris: Message.SubresourceUris, to: String, uri: String)","description":"io.river.connector.twilio.model.Message.Message","location":"connectors/twilio/io.river.connector.twilio.model/-message/-message.html","searchKeys":["Message","fun Message(accountSid: String, apiVersion: String, body: String, dateCreated: String, dateSent: String, dateUpdated: String, direction: String, errorCode: Any, errorMessage: Any, from: String, messagingServiceSid: String, numMedia: String, numSegments: String, price: Any, priceUnit: Any, sid: String, status: String, subresourceUris: Message.SubresourceUris, to: String, uri: String)","io.river.connector.twilio.model.Message.Message"]},{"name":"fun Sms(number: String)","description":"io.river.connector.twilio.model.Destination.Sms.Sms","location":"connectors/twilio/io.river.connector.twilio.model/-destination/-sms/-sms.html","searchKeys":["Sms","fun Sms(number: String)","io.river.connector.twilio.model.Destination.Sms.Sms"]},{"name":"fun SubresourceUris(media: String)","description":"io.river.connector.twilio.model.Message.SubresourceUris.SubresourceUris","location":"connectors/twilio/io.river.connector.twilio.model/-message/-subresource-uris/-subresource-uris.html","searchKeys":["SubresourceUris","fun SubresourceUris(media: String)","io.river.connector.twilio.model.Message.SubresourceUris.SubresourceUris"]},{"name":"fun TwilioConfiguration(accountSid: String, authToken: String, baseUrl: String = BaseUrl)","description":"io.river.connector.twilio.model.TwilioConfiguration.TwilioConfiguration","location":"connectors/twilio/io.river.connector.twilio.model/-twilio-configuration/-twilio-configuration.html","searchKeys":["TwilioConfiguration","fun TwilioConfiguration(accountSid: String, authToken: String, baseUrl: String = BaseUrl)","io.river.connector.twilio.model.TwilioConfiguration.TwilioConfiguration"]},{"name":"fun TwilioMessageHttpApi(configuration: TwilioConfiguration, objectMapper: ObjectMapper = jacksonObjectMapper(), httpClient: HttpClient = HttpClient.newHttpClient())","description":"io.river.connector.twilio.TwilioMessageHttpApi.TwilioMessageHttpApi","location":"connectors/twilio/io.river.connector.twilio/-twilio-message-http-api/-twilio-message-http-api.html","searchKeys":["TwilioMessageHttpApi","fun TwilioMessageHttpApi(configuration: TwilioConfiguration, objectMapper: ObjectMapper = jacksonObjectMapper(), httpClient: HttpClient = HttpClient.newHttpClient())","io.river.connector.twilio.TwilioMessageHttpApi.TwilioMessageHttpApi"]},{"name":"fun TwilioMessageHttpApi.sendMessageFlow(upstream: Flow<CreateMessage>, parallelism: Int = 1): Flow<Message>","description":"io.river.connector.twilio.sendMessageFlow","location":"connectors/twilio/io.river.connector.twilio/send-message-flow.html","searchKeys":["sendMessageFlow","fun TwilioMessageHttpApi.sendMessageFlow(upstream: Flow<CreateMessage>, parallelism: Int = 1): Flow<Message>","io.river.connector.twilio.sendMessageFlow"]},{"name":"fun Whatsapp(number: String)","description":"io.river.connector.twilio.model.Destination.Whatsapp.Whatsapp","location":"connectors/twilio/io.river.connector.twilio.model/-destination/-whatsapp/-whatsapp.html","searchKeys":["Whatsapp","fun Whatsapp(number: String)","io.river.connector.twilio.model.Destination.Whatsapp.Whatsapp"]},{"name":"fun asEncodedString(): String","description":"io.river.connector.twilio.model.CreateMessage.asEncodedString","location":"connectors/twilio/io.river.connector.twilio.model/-create-message/as-encoded-string.html","searchKeys":["asEncodedString","fun asEncodedString(): String","io.river.connector.twilio.model.CreateMessage.asEncodedString"]},{"name":"object Companion","description":"io.river.connector.twilio.model.TwilioConfiguration.Companion","location":"connectors/twilio/io.river.connector.twilio.model/-twilio-configuration/-companion/index.html","searchKeys":["Companion","object Companion","io.river.connector.twilio.model.TwilioConfiguration.Companion"]},{"name":"sealed class Destination","description":"io.river.connector.twilio.model.Destination","location":"connectors/twilio/io.river.connector.twilio.model/-destination/index.html","searchKeys":["Destination","sealed class Destination","io.river.connector.twilio.model.Destination"]},{"name":"suspend fun createMessage(createMessage: CreateMessage): Message","description":"io.river.connector.twilio.TwilioMessageHttpApi.createMessage","location":"connectors/twilio/io.river.connector.twilio/-twilio-message-http-api/create-message.html","searchKeys":["createMessage","suspend fun createMessage(createMessage: CreateMessage): Message","io.river.connector.twilio.TwilioMessageHttpApi.createMessage"]},{"name":"val accountSid: String","description":"io.river.connector.twilio.model.Message.accountSid","location":"connectors/twilio/io.river.connector.twilio.model/-message/account-sid.html","searchKeys":["accountSid","val accountSid: String","io.river.connector.twilio.model.Message.accountSid"]},{"name":"val accountSid: String","description":"io.river.connector.twilio.model.TwilioConfiguration.accountSid","location":"connectors/twilio/io.river.connector.twilio.model/-twilio-configuration/account-sid.html","searchKeys":["accountSid","val accountSid: String","io.river.connector.twilio.model.TwilioConfiguration.accountSid"]},{"name":"val apiVersion: String","description":"io.river.connector.twilio.model.Message.apiVersion","location":"connectors/twilio/io.river.connector.twilio.model/-message/api-version.html","searchKeys":["apiVersion","val apiVersion: String","io.river.connector.twilio.model.Message.apiVersion"]},{"name":"val authToken: String","description":"io.river.connector.twilio.model.TwilioConfiguration.authToken","location":"connectors/twilio/io.river.connector.twilio.model/-twilio-configuration/auth-token.html","searchKeys":["authToken","val authToken: String","io.river.connector.twilio.model.TwilioConfiguration.authToken"]},{"name":"val authenticationHeader: String","description":"io.river.connector.twilio.model.TwilioConfiguration.authenticationHeader","location":"connectors/twilio/io.river.connector.twilio.model/-twilio-configuration/authentication-header.html","searchKeys":["authenticationHeader","val authenticationHeader: String","io.river.connector.twilio.model.TwilioConfiguration.authenticationHeader"]},{"name":"val baseUrl: String","description":"io.river.connector.twilio.model.TwilioConfiguration.baseUrl","location":"connectors/twilio/io.river.connector.twilio.model/-twilio-configuration/base-url.html","searchKeys":["baseUrl","val baseUrl: String","io.river.connector.twilio.model.TwilioConfiguration.baseUrl"]},{"name":"val body: String","description":"io.river.connector.twilio.model.CreateMessage.body","location":"connectors/twilio/io.river.connector.twilio.model/-create-message/body.html","searchKeys":["body","val body: String","io.river.connector.twilio.model.CreateMessage.body"]},{"name":"val body: String","description":"io.river.connector.twilio.model.Message.body","location":"connectors/twilio/io.river.connector.twilio.model/-message/body.html","searchKeys":["body","val body: String","io.river.connector.twilio.model.Message.body"]},{"name":"val configuration: TwilioConfiguration","description":"io.river.connector.twilio.TwilioMessageHttpApi.configuration","location":"connectors/twilio/io.river.connector.twilio/-twilio-message-http-api/configuration.html","searchKeys":["configuration","val configuration: TwilioConfiguration","io.river.connector.twilio.TwilioMessageHttpApi.configuration"]},{"name":"val dateCreated: String","description":"io.river.connector.twilio.model.Message.dateCreated","location":"connectors/twilio/io.river.connector.twilio.model/-message/date-created.html","searchKeys":["dateCreated","val dateCreated: String","io.river.connector.twilio.model.Message.dateCreated"]},{"name":"val dateSent: String","description":"io.river.connector.twilio.model.Message.dateSent","location":"connectors/twilio/io.river.connector.twilio.model/-message/date-sent.html","searchKeys":["dateSent","val dateSent: String","io.river.connector.twilio.model.Message.dateSent"]},{"name":"val dateUpdated: String","description":"io.river.connector.twilio.model.Message.dateUpdated","location":"connectors/twilio/io.river.connector.twilio.model/-message/date-updated.html","searchKeys":["dateUpdated","val dateUpdated: String","io.river.connector.twilio.model.Message.dateUpdated"]},{"name":"val direction: String","description":"io.river.connector.twilio.model.Message.direction","location":"connectors/twilio/io.river.connector.twilio.model/-message/direction.html","searchKeys":["direction","val direction: String","io.river.connector.twilio.model.Message.direction"]},{"name":"val errorCode: Any","description":"io.river.connector.twilio.model.Message.errorCode","location":"connectors/twilio/io.river.connector.twilio.model/-message/error-code.html","searchKeys":["errorCode","val errorCode: Any","io.river.connector.twilio.model.Message.errorCode"]},{"name":"val errorMessage: Any","description":"io.river.connector.twilio.model.Message.errorMessage","location":"connectors/twilio/io.river.connector.twilio.model/-message/error-message.html","searchKeys":["errorMessage","val errorMessage: Any","io.river.connector.twilio.model.Message.errorMessage"]},{"name":"val from: String","description":"io.river.connector.twilio.model.Message.from","location":"connectors/twilio/io.river.connector.twilio.model/-message/from.html","searchKeys":["from","val from: String","io.river.connector.twilio.model.Message.from"]},{"name":"val httpClient: HttpClient","description":"io.river.connector.twilio.TwilioMessageHttpApi.httpClient","location":"connectors/twilio/io.river.connector.twilio/-twilio-message-http-api/http-client.html","searchKeys":["httpClient","val httpClient: HttpClient","io.river.connector.twilio.TwilioMessageHttpApi.httpClient"]},{"name":"val media: String","description":"io.river.connector.twilio.model.Message.SubresourceUris.media","location":"connectors/twilio/io.river.connector.twilio.model/-message/-subresource-uris/media.html","searchKeys":["media","val media: String","io.river.connector.twilio.model.Message.SubresourceUris.media"]},{"name":"val messagingServiceSid: String","description":"io.river.connector.twilio.model.CreateMessage.messagingServiceSid","location":"connectors/twilio/io.river.connector.twilio.model/-create-message/messaging-service-sid.html","searchKeys":["messagingServiceSid","val messagingServiceSid: String","io.river.connector.twilio.model.CreateMessage.messagingServiceSid"]},{"name":"val messagingServiceSid: String","description":"io.river.connector.twilio.model.Message.messagingServiceSid","location":"connectors/twilio/io.river.connector.twilio.model/-message/messaging-service-sid.html","searchKeys":["messagingServiceSid","val messagingServiceSid: String","io.river.connector.twilio.model.Message.messagingServiceSid"]},{"name":"val numMedia: String","description":"io.river.connector.twilio.model.Message.numMedia","location":"connectors/twilio/io.river.connector.twilio.model/-message/num-media.html","searchKeys":["numMedia","val numMedia: String","io.river.connector.twilio.model.Message.numMedia"]},{"name":"val numSegments: String","description":"io.river.connector.twilio.model.Message.numSegments","location":"connectors/twilio/io.river.connector.twilio.model/-message/num-segments.html","searchKeys":["numSegments","val numSegments: String","io.river.connector.twilio.model.Message.numSegments"]},{"name":"val number: String","description":"io.river.connector.twilio.model.Destination.Sms.number","location":"connectors/twilio/io.river.connector.twilio.model/-destination/-sms/number.html","searchKeys":["number","val number: String","io.river.connector.twilio.model.Destination.Sms.number"]},{"name":"val number: String","description":"io.river.connector.twilio.model.Destination.Whatsapp.number","location":"connectors/twilio/io.river.connector.twilio.model/-destination/-whatsapp/number.html","searchKeys":["number","val number: String","io.river.connector.twilio.model.Destination.Whatsapp.number"]},{"name":"val objectMapper: ObjectMapper","description":"io.river.connector.twilio.TwilioMessageHttpApi.objectMapper","location":"connectors/twilio/io.river.connector.twilio/-twilio-message-http-api/object-mapper.html","searchKeys":["objectMapper","val objectMapper: ObjectMapper","io.river.connector.twilio.TwilioMessageHttpApi.objectMapper"]},{"name":"val price: Any","description":"io.river.connector.twilio.model.Message.price","location":"connectors/twilio/io.river.connector.twilio.model/-message/price.html","searchKeys":["price","val price: Any","io.river.connector.twilio.model.Message.price"]},{"name":"val priceUnit: Any","description":"io.river.connector.twilio.model.Message.priceUnit","location":"connectors/twilio/io.river.connector.twilio.model/-message/price-unit.html","searchKeys":["priceUnit","val priceUnit: Any","io.river.connector.twilio.model.Message.priceUnit"]},{"name":"val shortenUrls: Boolean = true","description":"io.river.connector.twilio.model.CreateMessage.shortenUrls","location":"connectors/twilio/io.river.connector.twilio.model/-create-message/shorten-urls.html","searchKeys":["shortenUrls","val shortenUrls: Boolean = true","io.river.connector.twilio.model.CreateMessage.shortenUrls"]},{"name":"val sid: String","description":"io.river.connector.twilio.model.Message.sid","location":"connectors/twilio/io.river.connector.twilio.model/-message/sid.html","searchKeys":["sid","val sid: String","io.river.connector.twilio.model.Message.sid"]},{"name":"val status: String","description":"io.river.connector.twilio.model.Message.status","location":"connectors/twilio/io.river.connector.twilio.model/-message/status.html","searchKeys":["status","val status: String","io.river.connector.twilio.model.Message.status"]},{"name":"val subresourceUris: Message.SubresourceUris","description":"io.river.connector.twilio.model.Message.subresourceUris","location":"connectors/twilio/io.river.connector.twilio.model/-message/subresource-uris.html","searchKeys":["subresourceUris","val subresourceUris: Message.SubresourceUris","io.river.connector.twilio.model.Message.subresourceUris"]},{"name":"val to: Destination","description":"io.river.connector.twilio.model.CreateMessage.to","location":"connectors/twilio/io.river.connector.twilio.model/-create-message/to.html","searchKeys":["to","val to: Destination","io.river.connector.twilio.model.CreateMessage.to"]},{"name":"val to: String","description":"io.river.connector.twilio.model.Message.to","location":"connectors/twilio/io.river.connector.twilio.model/-message/to.html","searchKeys":["to","val to: String","io.river.connector.twilio.model.Message.to"]},{"name":"val uri: String","description":"io.river.connector.twilio.model.Message.uri","location":"connectors/twilio/io.river.connector.twilio.model/-message/uri.html","searchKeys":["uri","val uri: String","io.river.connector.twilio.model.Message.uri"]},{"name":"val value: String","description":"io.river.connector.twilio.model.Destination.value","location":"connectors/twilio/io.river.connector.twilio.model/-destination/value.html","searchKeys":["value","val value: String","io.river.connector.twilio.model.Destination.value"]},{"name":"data class CommittableOffset<R>(val numberOfRecords: Int, markProcessed: suspend (R) -> Unit, markBatchFinished: suspend () -> Unit)","description":"io.river.connector.red.hat.debezium.model.CommittableOffset","location":"connectors/red-hat/debezium/io.river.connector.red.hat.debezium.model/-committable-offset/index.html","searchKeys":["CommittableOffset","data class CommittableOffset<R>(val numberOfRecords: Int, markProcessed: suspend (R) -> Unit, markBatchFinished: suspend () -> Unit)","io.river.connector.red.hat.debezium.model.CommittableOffset"]},{"name":"data class CommittableRecord<R>(val record: R, committer: CommittableOffset<R>)","description":"io.river.connector.red.hat.debezium.model.CommittableRecord","location":"connectors/red-hat/debezium/io.river.connector.red.hat.debezium.model/-committable-record/index.html","searchKeys":["CommittableRecord","data class CommittableRecord<R>(val record: R, committer: CommittableOffset<R>)","io.river.connector.red.hat.debezium.model.CommittableRecord"]},{"name":"fun <R> CommittableOffset(numberOfRecords: Int, markProcessed: suspend (R) -> Unit, markBatchFinished: suspend () -> Unit)","description":"io.river.connector.red.hat.debezium.model.CommittableOffset.CommittableOffset","location":"connectors/red-hat/debezium/io.river.connector.red.hat.debezium.model/-committable-offset/-committable-offset.html","searchKeys":["CommittableOffset","fun <R> CommittableOffset(numberOfRecords: Int, markProcessed: suspend (R) -> Unit, markBatchFinished: suspend () -> Unit)","io.river.connector.red.hat.debezium.model.CommittableOffset.CommittableOffset"]},{"name":"fun <R> CommittableRecord(record: R, committer: CommittableOffset<R>)","description":"io.river.connector.red.hat.debezium.model.CommittableRecord.CommittableRecord","location":"connectors/red-hat/debezium/io.river.connector.red.hat.debezium.model/-committable-record/-committable-record.html","searchKeys":["CommittableRecord","fun <R> CommittableRecord(record: R, committer: CommittableOffset<R>)","io.river.connector.red.hat.debezium.model.CommittableRecord.CommittableRecord"]},{"name":"fun <R> debeziumFlow(bufferCapacity: Int = Channel.BUFFERED, maxRecordsInFlight: Int = 2048, executor: ExecutorService = Executors.newSingleThreadExecutor(), engineBuilder: () -> DebeziumEngine.Builder<R>): Flow<CommittableRecord<R>>","description":"io.river.connector.red.hat.debezium.debeziumFlow","location":"connectors/red-hat/debezium/io.river.connector.red.hat.debezium/debezium-flow.html","searchKeys":["debeziumFlow","fun <R> debeziumFlow(bufferCapacity: Int = Channel.BUFFERED, maxRecordsInFlight: Int = 2048, executor: ExecutorService = Executors.newSingleThreadExecutor(), engineBuilder: () -> DebeziumEngine.Builder<R>): Flow<CommittableRecord<R>>","io.river.connector.red.hat.debezium.debeziumFlow"]},{"name":"suspend fun markProcessed()","description":"io.river.connector.red.hat.debezium.model.CommittableRecord.markProcessed","location":"connectors/red-hat/debezium/io.river.connector.red.hat.debezium.model/-committable-record/mark-processed.html","searchKeys":["markProcessed","suspend fun markProcessed()","io.river.connector.red.hat.debezium.model.CommittableRecord.markProcessed"]},{"name":"suspend fun markProcessed(record: R)","description":"io.river.connector.red.hat.debezium.model.CommittableOffset.markProcessed","location":"connectors/red-hat/debezium/io.river.connector.red.hat.debezium.model/-committable-offset/mark-processed.html","searchKeys":["markProcessed","suspend fun markProcessed(record: R)","io.river.connector.red.hat.debezium.model.CommittableOffset.markProcessed"]},{"name":"val numberOfRecords: Int","description":"io.river.connector.red.hat.debezium.model.CommittableOffset.numberOfRecords","location":"connectors/red-hat/debezium/io.river.connector.red.hat.debezium.model/-committable-offset/number-of-records.html","searchKeys":["numberOfRecords","val numberOfRecords: Int","io.river.connector.red.hat.debezium.model.CommittableOffset.numberOfRecords"]},{"name":"val record: R","description":"io.river.connector.red.hat.debezium.model.CommittableRecord.record","location":"connectors/red-hat/debezium/io.river.connector.red.hat.debezium.model/-committable-record/record.html","searchKeys":["record","val record: R","io.river.connector.red.hat.debezium.model.CommittableRecord.record"]},{"name":"abstract fun <T> paginatedSearchFlow(client: ElasticsearchAsyncClient, clazz: Class<T>): Flow<Hit<T>>","description":"io.river.connector.elasticsearch.PaginatedSearch.paginatedSearchFlow","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/paginated-search-flow.html","searchKeys":["paginatedSearchFlow","abstract fun <T> paginatedSearchFlow(client: ElasticsearchAsyncClient, clazz: Class<T>): Flow<Hit<T>>","io.river.connector.elasticsearch.PaginatedSearch.paginatedSearchFlow"]},{"name":"class BySearchAfter(val index: String, val pageSize: Int = 100, val parallelism: Int = 1, val fields: List<PaginatedSearch.BySearchAfter.Field>, val f: (Query.Builder) -> ObjectBuilder<Query> = { it.matchAll { it } }) : PaginatedSearch","description":"io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-by-search-after/index.html","searchKeys":["BySearchAfter","class BySearchAfter(val index: String, val pageSize: Int = 100, val parallelism: Int = 1, val fields: List<PaginatedSearch.BySearchAfter.Field>, val f: (Query.Builder) -> ObjectBuilder<Query> = { it.matchAll { it } }) : PaginatedSearch","io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter"]},{"name":"class Default(val index: String, val pageSize: Int = 100, val parallelism: Int = 1, val f: (Query.Builder) -> ObjectBuilder<Query> = { it.matchAll { it } }) : PaginatedSearch","description":"io.river.connector.elasticsearch.PaginatedSearch.Default","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-default/index.html","searchKeys":["Default","class Default(val index: String, val pageSize: Int = 100, val parallelism: Int = 1, val f: (Query.Builder) -> ObjectBuilder<Query> = { it.matchAll { it } }) : PaginatedSearch","io.river.connector.elasticsearch.PaginatedSearch.Default"]},{"name":"class Field(val name: String, val order: SortOrder)","description":"io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.Field","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-by-search-after/-field/index.html","searchKeys":["Field","class Field(val name: String, val order: SortOrder)","io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.Field"]},{"name":"data class Document<T>(val id: String, val index: String, val document: T)","description":"io.river.connector.elasticsearch.Document","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-document/index.html","searchKeys":["Document","data class Document<T>(val id: String, val index: String, val document: T)","io.river.connector.elasticsearch.Document"]},{"name":"fun <T> Document(id: String, index: String, document: T)","description":"io.river.connector.elasticsearch.Document.Document","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-document/-document.html","searchKeys":["Document","fun <T> Document(id: String, index: String, document: T)","io.river.connector.elasticsearch.Document.Document"]},{"name":"fun <T> ElasticsearchAsyncClient.indexFlow(upstream: Flow<Document<T>>, parallelism: Int = 1, chunkStrategy: ChunkStrategy = ChunkStrategy.TimeWindow(100, 250.milliseconds)): Flow<BulkResponseItem>","description":"io.river.connector.elasticsearch.indexFlow","location":"connectors/elasticsearch/io.river.connector.elasticsearch/index-flow.html","searchKeys":["indexFlow","fun <T> ElasticsearchAsyncClient.indexFlow(upstream: Flow<Document<T>>, parallelism: Int = 1, chunkStrategy: ChunkStrategy = ChunkStrategy.TimeWindow(100, 250.milliseconds)): Flow<BulkResponseItem>","io.river.connector.elasticsearch.indexFlow"]},{"name":"fun <T> Flow<T>.toDocument(f: (T) -> Pair<String, String>): Flow<Document<T>>","description":"io.river.connector.elasticsearch.toDocument","location":"connectors/elasticsearch/io.river.connector.elasticsearch/to-document.html","searchKeys":["toDocument","fun <T> Flow<T>.toDocument(f: (T) -> Pair<String, String>): Flow<Document<T>>","io.river.connector.elasticsearch.toDocument"]},{"name":"fun BySearchAfter(index: String, pageSize: Int = 100, parallelism: Int = 1, fields: List<PaginatedSearch.BySearchAfter.Field>, f: (Query.Builder) -> ObjectBuilder<Query> = { it.matchAll { it } })","description":"io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.BySearchAfter","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-by-search-after/-by-search-after.html","searchKeys":["BySearchAfter","fun BySearchAfter(index: String, pageSize: Int = 100, parallelism: Int = 1, fields: List<PaginatedSearch.BySearchAfter.Field>, f: (Query.Builder) -> ObjectBuilder<Query> = { it.matchAll { it } })","io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.BySearchAfter"]},{"name":"fun Default(index: String, pageSize: Int = 100, parallelism: Int = 1, f: (Query.Builder) -> ObjectBuilder<Query> = { it.matchAll { it } })","description":"io.river.connector.elasticsearch.PaginatedSearch.Default.Default","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-default/-default.html","searchKeys":["Default","fun Default(index: String, pageSize: Int = 100, parallelism: Int = 1, f: (Query.Builder) -> ObjectBuilder<Query> = { it.matchAll { it } })","io.river.connector.elasticsearch.PaginatedSearch.Default.Default"]},{"name":"fun Field(name: String, order: SortOrder)","description":"io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.Field.Field","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-by-search-after/-field/-field.html","searchKeys":["Field","fun Field(name: String, order: SortOrder)","io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.Field.Field"]},{"name":"inline fun <T> ElasticsearchAsyncClient.paginatedSearchFlow(configuration: PaginatedSearch): Flow<Hit<T>>","description":"io.river.connector.elasticsearch.paginatedSearchFlow","location":"connectors/elasticsearch/io.river.connector.elasticsearch/paginated-search-flow.html","searchKeys":["paginatedSearchFlow","inline fun <T> ElasticsearchAsyncClient.paginatedSearchFlow(configuration: PaginatedSearch): Flow<Hit<T>>","io.river.connector.elasticsearch.paginatedSearchFlow"]},{"name":"interface PaginatedSearch","description":"io.river.connector.elasticsearch.PaginatedSearch","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/index.html","searchKeys":["PaginatedSearch","interface PaginatedSearch","io.river.connector.elasticsearch.PaginatedSearch"]},{"name":"open override fun <T> paginatedSearchFlow(client: ElasticsearchAsyncClient, clazz: Class<T>): Flow<Hit<T>>","description":"io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.paginatedSearchFlow","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-by-search-after/paginated-search-flow.html","searchKeys":["paginatedSearchFlow","open override fun <T> paginatedSearchFlow(client: ElasticsearchAsyncClient, clazz: Class<T>): Flow<Hit<T>>","io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.paginatedSearchFlow"]},{"name":"open override fun <T> paginatedSearchFlow(client: ElasticsearchAsyncClient, clazz: Class<T>): Flow<Hit<T>>","description":"io.river.connector.elasticsearch.PaginatedSearch.Default.paginatedSearchFlow","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-default/paginated-search-flow.html","searchKeys":["paginatedSearchFlow","open override fun <T> paginatedSearchFlow(client: ElasticsearchAsyncClient, clazz: Class<T>): Flow<Hit<T>>","io.river.connector.elasticsearch.PaginatedSearch.Default.paginatedSearchFlow"]},{"name":"suspend fun ElasticsearchAsyncClient.maxResultWindow(index: String, default: Int = 10000): Int","description":"io.river.connector.elasticsearch.maxResultWindow","location":"connectors/elasticsearch/io.river.connector.elasticsearch/max-result-window.html","searchKeys":["maxResultWindow","suspend fun ElasticsearchAsyncClient.maxResultWindow(index: String, default: Int = 10000): Int","io.river.connector.elasticsearch.maxResultWindow"]},{"name":"val document: T","description":"io.river.connector.elasticsearch.Document.document","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-document/document.html","searchKeys":["document","val document: T","io.river.connector.elasticsearch.Document.document"]},{"name":"val f: (Query.Builder) -> ObjectBuilder<Query>","description":"io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.f","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-by-search-after/f.html","searchKeys":["f","val f: (Query.Builder) -> ObjectBuilder<Query>","io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.f"]},{"name":"val f: (Query.Builder) -> ObjectBuilder<Query>","description":"io.river.connector.elasticsearch.PaginatedSearch.Default.f","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-default/f.html","searchKeys":["f","val f: (Query.Builder) -> ObjectBuilder<Query>","io.river.connector.elasticsearch.PaginatedSearch.Default.f"]},{"name":"val fields: List<PaginatedSearch.BySearchAfter.Field>","description":"io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.fields","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-by-search-after/fields.html","searchKeys":["fields","val fields: List<PaginatedSearch.BySearchAfter.Field>","io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.fields"]},{"name":"val id: String","description":"io.river.connector.elasticsearch.Document.id","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-document/id.html","searchKeys":["id","val id: String","io.river.connector.elasticsearch.Document.id"]},{"name":"val index: String","description":"io.river.connector.elasticsearch.Document.index","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-document/--index--.html","searchKeys":["index","val index: String","io.river.connector.elasticsearch.Document.index"]},{"name":"val index: String","description":"io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.index","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-by-search-after/--index--.html","searchKeys":["index","val index: String","io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.index"]},{"name":"val index: String","description":"io.river.connector.elasticsearch.PaginatedSearch.Default.index","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-default/--index--.html","searchKeys":["index","val index: String","io.river.connector.elasticsearch.PaginatedSearch.Default.index"]},{"name":"val name: String","description":"io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.Field.name","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-by-search-after/-field/name.html","searchKeys":["name","val name: String","io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.Field.name"]},{"name":"val order: SortOrder","description":"io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.Field.order","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-by-search-after/-field/order.html","searchKeys":["order","val order: SortOrder","io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.Field.order"]},{"name":"val pageSize: Int = 100","description":"io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.pageSize","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-by-search-after/page-size.html","searchKeys":["pageSize","val pageSize: Int = 100","io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.pageSize"]},{"name":"val pageSize: Int = 100","description":"io.river.connector.elasticsearch.PaginatedSearch.Default.pageSize","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-default/page-size.html","searchKeys":["pageSize","val pageSize: Int = 100","io.river.connector.elasticsearch.PaginatedSearch.Default.pageSize"]},{"name":"val parallelism: Int = 1","description":"io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.parallelism","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-by-search-after/parallelism.html","searchKeys":["parallelism","val parallelism: Int = 1","io.river.connector.elasticsearch.PaginatedSearch.BySearchAfter.parallelism"]},{"name":"val parallelism: Int = 1","description":"io.river.connector.elasticsearch.PaginatedSearch.Default.parallelism","location":"connectors/elasticsearch/io.river.connector.elasticsearch/-paginated-search/-default/parallelism.html","searchKeys":["parallelism","val parallelism: Int = 1","io.river.connector.elasticsearch.PaginatedSearch.Default.parallelism"]},{"name":"class ChangeMessageVisibility(val timeout: Int) : Acknowledgment","description":"io.river.connector.aws.sqs.model.Acknowledgment.ChangeMessageVisibility","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-acknowledgment/-change-message-visibility/index.html","searchKeys":["ChangeMessageVisibility","class ChangeMessageVisibility(val timeout: Int) : Acknowledgment","io.river.connector.aws.sqs.model.Acknowledgment.ChangeMessageVisibility"]},{"name":"class ReceiveMessageRequestBuilder(var queueUrl: String? = null, var waitTimeSeconds: Int = 20, var maxNumberOfMessages: Int = 10, var visibilityTimeout: Int = 30, var receiveRequestAttemptId: String? = null, var messageAttributeNames: List<String> = emptyList(), var attributeNames: List<QueueAttributeName> = emptyList())","description":"io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-receive-message-request-builder/index.html","searchKeys":["ReceiveMessageRequestBuilder","class ReceiveMessageRequestBuilder(var queueUrl: String? = null, var waitTimeSeconds: Int = 20, var maxNumberOfMessages: Int = 10, var visibilityTimeout: Int = 30, var receiveRequestAttemptId: String? = null, var messageAttributeNames: List<String> = emptyList(), var attributeNames: List<QueueAttributeName> = emptyList())","io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder"]},{"name":"data class AcknowledgmentResult<T : SdkResponse>(val message: Message, val acknowledgment: Acknowledgment, val response: SdkResponse?)","description":"io.river.connector.aws.sqs.model.AcknowledgmentResult","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-acknowledgment-result/index.html","searchKeys":["AcknowledgmentResult","data class AcknowledgmentResult<T : SdkResponse>(val message: Message, val acknowledgment: Acknowledgment, val response: SdkResponse?)","io.river.connector.aws.sqs.model.AcknowledgmentResult"]},{"name":"data class MessageAcknowledgment<T : Acknowledgment>(val message: Message, val acknowledgment: T)","description":"io.river.connector.aws.sqs.model.MessageAcknowledgment","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-message-acknowledgment/index.html","searchKeys":["MessageAcknowledgment","data class MessageAcknowledgment<T : Acknowledgment>(val message: Message, val acknowledgment: T)","io.river.connector.aws.sqs.model.MessageAcknowledgment"]},{"name":"data class RequestMessage(val body: String, val delaySeconds: Int = 0, val messageAttributes: Map<String, MessageAttributeValue> = emptyMap(), val id: String = UUID.randomUUID().toString())","description":"io.river.connector.aws.sqs.model.RequestMessage","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-request-message/index.html","searchKeys":["RequestMessage","data class RequestMessage(val body: String, val delaySeconds: Int = 0, val messageAttributes: Map<String, MessageAttributeValue> = emptyMap(), val id: String = UUID.randomUUID().toString())","io.river.connector.aws.sqs.model.RequestMessage"]},{"name":"fun <T : Acknowledgment> MessageAcknowledgment(message: Message, acknowledgment: T)","description":"io.river.connector.aws.sqs.model.MessageAcknowledgment.MessageAcknowledgment","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-message-acknowledgment/-message-acknowledgment.html","searchKeys":["MessageAcknowledgment","fun <T : Acknowledgment> MessageAcknowledgment(message: Message, acknowledgment: T)","io.river.connector.aws.sqs.model.MessageAcknowledgment.MessageAcknowledgment"]},{"name":"fun AcknowledgmentResult(message: Message, acknowledgment: Acknowledgment, response: SdkResponse?)","description":"io.river.connector.aws.sqs.model.AcknowledgmentResult.AcknowledgmentResult","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-acknowledgment-result/-acknowledgment-result.html","searchKeys":["AcknowledgmentResult","fun AcknowledgmentResult(message: Message, acknowledgment: Acknowledgment, response: SdkResponse?)","io.river.connector.aws.sqs.model.AcknowledgmentResult.AcknowledgmentResult"]},{"name":"fun ChangeMessageVisibility(timeout: Int)","description":"io.river.connector.aws.sqs.model.Acknowledgment.ChangeMessageVisibility.ChangeMessageVisibility","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-acknowledgment/-change-message-visibility/-change-message-visibility.html","searchKeys":["ChangeMessageVisibility","fun ChangeMessageVisibility(timeout: Int)","io.river.connector.aws.sqs.model.Acknowledgment.ChangeMessageVisibility.ChangeMessageVisibility"]},{"name":"fun Message.acknowledgeWith(acknowledgment: Acknowledgment): MessageAcknowledgment<Acknowledgment>","description":"io.river.connector.aws.sqs.acknowledgeWith","location":"connectors/aws/sqs/io.river.connector.aws.sqs/acknowledge-with.html","searchKeys":["acknowledgeWith","fun Message.acknowledgeWith(acknowledgment: Acknowledgment): MessageAcknowledgment<Acknowledgment>","io.river.connector.aws.sqs.acknowledgeWith"]},{"name":"fun ReceiveMessageRequestBuilder(queueUrl: String? = null, waitTimeSeconds: Int = 20, maxNumberOfMessages: Int = 10, visibilityTimeout: Int = 30, receiveRequestAttemptId: String? = null, messageAttributeNames: List<String> = emptyList(), attributeNames: List<QueueAttributeName> = emptyList())","description":"io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.ReceiveMessageRequestBuilder","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-receive-message-request-builder/-receive-message-request-builder.html","searchKeys":["ReceiveMessageRequestBuilder","fun ReceiveMessageRequestBuilder(queueUrl: String? = null, waitTimeSeconds: Int = 20, maxNumberOfMessages: Int = 10, visibilityTimeout: Int = 30, receiveRequestAttemptId: String? = null, messageAttributeNames: List<String> = emptyList(), attributeNames: List<QueueAttributeName> = emptyList())","io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.ReceiveMessageRequestBuilder"]},{"name":"fun RequestMessage(body: String, delaySeconds: Int = 0, messageAttributes: Map<String, MessageAttributeValue> = emptyMap(), id: String = UUID.randomUUID().toString())","description":"io.river.connector.aws.sqs.model.RequestMessage.RequestMessage","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-request-message/-request-message.html","searchKeys":["RequestMessage","fun RequestMessage(body: String, delaySeconds: Int = 0, messageAttributes: Map<String, MessageAttributeValue> = emptyMap(), id: String = UUID.randomUUID().toString())","io.river.connector.aws.sqs.model.RequestMessage.RequestMessage"]},{"name":"fun SqsAsyncClient.acknowledgmentMessageFlow(queueUrl: String, upstream: Flow<MessageAcknowledgment<out Acknowledgment>>, parallelism: Int = 1, chunkStrategy: ChunkStrategy = ChunkStrategy.TimeWindow(10, 250.milliseconds)): Flow<AcknowledgmentResult<SdkResponse>>","description":"io.river.connector.aws.sqs.acknowledgmentMessageFlow","location":"connectors/aws/sqs/io.river.connector.aws.sqs/acknowledgment-message-flow.html","searchKeys":["acknowledgmentMessageFlow","fun SqsAsyncClient.acknowledgmentMessageFlow(queueUrl: String, upstream: Flow<MessageAcknowledgment<out Acknowledgment>>, parallelism: Int = 1, chunkStrategy: ChunkStrategy = ChunkStrategy.TimeWindow(10, 250.milliseconds)): Flow<AcknowledgmentResult<SdkResponse>>","io.river.connector.aws.sqs.acknowledgmentMessageFlow"]},{"name":"fun SqsAsyncClient.changeMessageVisibilityFlow(queueUrl: String, upstream: Flow<MessageAcknowledgment<Acknowledgment.ChangeMessageVisibility>>, parallelism: Int = 1, chunkStrategy: ChunkStrategy = ChunkStrategy.TimeWindow(10, 250.milliseconds)): Flow<Pair<MessageAcknowledgment<Acknowledgment.ChangeMessageVisibility>, ChangeMessageVisibilityBatchResponse>>","description":"io.river.connector.aws.sqs.changeMessageVisibilityFlow","location":"connectors/aws/sqs/io.river.connector.aws.sqs/change-message-visibility-flow.html","searchKeys":["changeMessageVisibilityFlow","fun SqsAsyncClient.changeMessageVisibilityFlow(queueUrl: String, upstream: Flow<MessageAcknowledgment<Acknowledgment.ChangeMessageVisibility>>, parallelism: Int = 1, chunkStrategy: ChunkStrategy = ChunkStrategy.TimeWindow(10, 250.milliseconds)): Flow<Pair<MessageAcknowledgment<Acknowledgment.ChangeMessageVisibility>, ChangeMessageVisibilityBatchResponse>>","io.river.connector.aws.sqs.changeMessageVisibilityFlow"]},{"name":"fun SqsAsyncClient.deleteMessagesFlow(queueUrl: String, upstream: Flow<MessageAcknowledgment<Acknowledgment.Delete>>, parallelism: Int = 1, chunkStrategy: ChunkStrategy = ChunkStrategy.TimeWindow(10, 250.milliseconds)): Flow<Pair<MessageAcknowledgment<Acknowledgment.Delete>, DeleteMessageBatchResponse>>","description":"io.river.connector.aws.sqs.deleteMessagesFlow","location":"connectors/aws/sqs/io.river.connector.aws.sqs/delete-messages-flow.html","searchKeys":["deleteMessagesFlow","fun SqsAsyncClient.deleteMessagesFlow(queueUrl: String, upstream: Flow<MessageAcknowledgment<Acknowledgment.Delete>>, parallelism: Int = 1, chunkStrategy: ChunkStrategy = ChunkStrategy.TimeWindow(10, 250.milliseconds)): Flow<Pair<MessageAcknowledgment<Acknowledgment.Delete>, DeleteMessageBatchResponse>>","io.river.connector.aws.sqs.deleteMessagesFlow"]},{"name":"fun SqsAsyncClient.receiveMessagesFlow(maxParallelism: Int = 1, stopOnEmptyList: Boolean = false, minimumParallelism: Int = 1, increaseStrategy: ParallelismIncreaseStrategy = ParallelismIncreaseStrategy.ByOne, builder: ReceiveMessageRequestBuilder.() -> Unit): Flow<Message>","description":"io.river.connector.aws.sqs.receiveMessagesFlow","location":"connectors/aws/sqs/io.river.connector.aws.sqs/receive-messages-flow.html","searchKeys":["receiveMessagesFlow","fun SqsAsyncClient.receiveMessagesFlow(maxParallelism: Int = 1, stopOnEmptyList: Boolean = false, minimumParallelism: Int = 1, increaseStrategy: ParallelismIncreaseStrategy = ParallelismIncreaseStrategy.ByOne, builder: ReceiveMessageRequestBuilder.() -> Unit): Flow<Message>","io.river.connector.aws.sqs.receiveMessagesFlow"]},{"name":"fun SqsAsyncClient.sendMessageFlow(queueUrl: String, upstream: Flow<RequestMessage>, parallelism: Int = 1, chunkStrategy: ChunkStrategy = ChunkStrategy.TimeWindow(10, 250.milliseconds)): Flow<SendMessageBatchResponse>","description":"io.river.connector.aws.sqs.sendMessageFlow","location":"connectors/aws/sqs/io.river.connector.aws.sqs/send-message-flow.html","searchKeys":["sendMessageFlow","fun SqsAsyncClient.sendMessageFlow(queueUrl: String, upstream: Flow<RequestMessage>, parallelism: Int = 1, chunkStrategy: ChunkStrategy = ChunkStrategy.TimeWindow(10, 250.milliseconds)): Flow<SendMessageBatchResponse>","io.river.connector.aws.sqs.sendMessageFlow"]},{"name":"fun build(): ReceiveMessageRequest","description":"io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.build","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-receive-message-request-builder/build.html","searchKeys":["build","fun build(): ReceiveMessageRequest","io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.build"]},{"name":"object Delete : Acknowledgment","description":"io.river.connector.aws.sqs.model.Acknowledgment.Delete","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-acknowledgment/-delete/index.html","searchKeys":["Delete","object Delete : Acknowledgment","io.river.connector.aws.sqs.model.Acknowledgment.Delete"]},{"name":"object Ignore : Acknowledgment","description":"io.river.connector.aws.sqs.model.Acknowledgment.Ignore","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-acknowledgment/-ignore/index.html","searchKeys":["Ignore","object Ignore : Acknowledgment","io.river.connector.aws.sqs.model.Acknowledgment.Ignore"]},{"name":"open override fun toString(): String","description":"io.river.connector.aws.sqs.model.Acknowledgment.toString","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-acknowledgment/to-string.html","searchKeys":["toString","open override fun toString(): String","io.river.connector.aws.sqs.model.Acknowledgment.toString"]},{"name":"sealed class Acknowledgment","description":"io.river.connector.aws.sqs.model.Acknowledgment","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-acknowledgment/index.html","searchKeys":["Acknowledgment","sealed class Acknowledgment","io.river.connector.aws.sqs.model.Acknowledgment"]},{"name":"val acknowledgment: Acknowledgment","description":"io.river.connector.aws.sqs.model.AcknowledgmentResult.acknowledgment","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-acknowledgment-result/acknowledgment.html","searchKeys":["acknowledgment","val acknowledgment: Acknowledgment","io.river.connector.aws.sqs.model.AcknowledgmentResult.acknowledgment"]},{"name":"val acknowledgment: T","description":"io.river.connector.aws.sqs.model.MessageAcknowledgment.acknowledgment","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-message-acknowledgment/acknowledgment.html","searchKeys":["acknowledgment","val acknowledgment: T","io.river.connector.aws.sqs.model.MessageAcknowledgment.acknowledgment"]},{"name":"val body: String","description":"io.river.connector.aws.sqs.model.RequestMessage.body","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-request-message/body.html","searchKeys":["body","val body: String","io.river.connector.aws.sqs.model.RequestMessage.body"]},{"name":"val delaySeconds: Int = 0","description":"io.river.connector.aws.sqs.model.RequestMessage.delaySeconds","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-request-message/delay-seconds.html","searchKeys":["delaySeconds","val delaySeconds: Int = 0","io.river.connector.aws.sqs.model.RequestMessage.delaySeconds"]},{"name":"val id: String","description":"io.river.connector.aws.sqs.model.RequestMessage.id","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-request-message/id.html","searchKeys":["id","val id: String","io.river.connector.aws.sqs.model.RequestMessage.id"]},{"name":"val message: Message","description":"io.river.connector.aws.sqs.model.AcknowledgmentResult.message","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-acknowledgment-result/message.html","searchKeys":["message","val message: Message","io.river.connector.aws.sqs.model.AcknowledgmentResult.message"]},{"name":"val message: Message","description":"io.river.connector.aws.sqs.model.MessageAcknowledgment.message","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-message-acknowledgment/message.html","searchKeys":["message","val message: Message","io.river.connector.aws.sqs.model.MessageAcknowledgment.message"]},{"name":"val messageAttributes: Map<String, MessageAttributeValue>","description":"io.river.connector.aws.sqs.model.RequestMessage.messageAttributes","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-request-message/message-attributes.html","searchKeys":["messageAttributes","val messageAttributes: Map<String, MessageAttributeValue>","io.river.connector.aws.sqs.model.RequestMessage.messageAttributes"]},{"name":"val response: SdkResponse?","description":"io.river.connector.aws.sqs.model.AcknowledgmentResult.response","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-acknowledgment-result/response.html","searchKeys":["response","val response: SdkResponse?","io.river.connector.aws.sqs.model.AcknowledgmentResult.response"]},{"name":"val timeout: Int","description":"io.river.connector.aws.sqs.model.Acknowledgment.ChangeMessageVisibility.timeout","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-acknowledgment/-change-message-visibility/timeout.html","searchKeys":["timeout","val timeout: Int","io.river.connector.aws.sqs.model.Acknowledgment.ChangeMessageVisibility.timeout"]},{"name":"var attributeNames: List<QueueAttributeName>","description":"io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.attributeNames","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-receive-message-request-builder/attribute-names.html","searchKeys":["attributeNames","var attributeNames: List<QueueAttributeName>","io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.attributeNames"]},{"name":"var maxNumberOfMessages: Int = 10","description":"io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.maxNumberOfMessages","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-receive-message-request-builder/max-number-of-messages.html","searchKeys":["maxNumberOfMessages","var maxNumberOfMessages: Int = 10","io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.maxNumberOfMessages"]},{"name":"var messageAttributeNames: List<String>","description":"io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.messageAttributeNames","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-receive-message-request-builder/message-attribute-names.html","searchKeys":["messageAttributeNames","var messageAttributeNames: List<String>","io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.messageAttributeNames"]},{"name":"var queueUrl: String? = null","description":"io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.queueUrl","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-receive-message-request-builder/queue-url.html","searchKeys":["queueUrl","var queueUrl: String? = null","io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.queueUrl"]},{"name":"var receiveRequestAttemptId: String? = null","description":"io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.receiveRequestAttemptId","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-receive-message-request-builder/receive-request-attempt-id.html","searchKeys":["receiveRequestAttemptId","var receiveRequestAttemptId: String? = null","io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.receiveRequestAttemptId"]},{"name":"var visibilityTimeout: Int = 30","description":"io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.visibilityTimeout","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-receive-message-request-builder/visibility-timeout.html","searchKeys":["visibilityTimeout","var visibilityTimeout: Int = 30","io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.visibilityTimeout"]},{"name":"var waitTimeSeconds: Int = 20","description":"io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.waitTimeSeconds","location":"connectors/aws/sqs/io.river.connector.aws.sqs.model/-receive-message-request-builder/wait-time-seconds.html","searchKeys":["waitTimeSeconds","var waitTimeSeconds: Int = 20","io.river.connector.aws.sqs.model.ReceiveMessageRequestBuilder.waitTimeSeconds"]},{"name":"AUTO_ACKNOWLEDGE","description":"io.river.connector.jms.model.SessionMode.AUTO_ACKNOWLEDGE","location":"connectors/jms/io.river.connector.jms.model/-session-mode/-a-u-t-o_-a-c-k-n-o-w-l-e-d-g-e/index.html","searchKeys":["AUTO_ACKNOWLEDGE","AUTO_ACKNOWLEDGE","io.river.connector.jms.model.SessionMode.AUTO_ACKNOWLEDGE"]},{"name":"CLIENT_ACKNOWLEDGE","description":"io.river.connector.jms.model.SessionMode.CLIENT_ACKNOWLEDGE","location":"connectors/jms/io.river.connector.jms.model/-session-mode/-c-l-i-e-n-t_-a-c-k-n-o-w-l-e-d-g-e/index.html","searchKeys":["CLIENT_ACKNOWLEDGE","CLIENT_ACKNOWLEDGE","io.river.connector.jms.model.SessionMode.CLIENT_ACKNOWLEDGE"]},{"name":"DUPS_OK_ACKNOWLEDGE","description":"io.river.connector.jms.model.SessionMode.DUPS_OK_ACKNOWLEDGE","location":"connectors/jms/io.river.connector.jms.model/-session-mode/-d-u-p-s_-o-k_-a-c-k-n-o-w-l-e-d-g-e/index.html","searchKeys":["DUPS_OK_ACKNOWLEDGE","DUPS_OK_ACKNOWLEDGE","io.river.connector.jms.model.SessionMode.DUPS_OK_ACKNOWLEDGE"]},{"name":"NON_PERSISTENT","description":"io.river.connector.jms.model.DeliveryMode.NON_PERSISTENT","location":"connectors/jms/io.river.connector.jms.model/-delivery-mode/-n-o-n_-p-e-r-s-i-s-t-e-n-t/index.html","searchKeys":["NON_PERSISTENT","NON_PERSISTENT","io.river.connector.jms.model.DeliveryMode.NON_PERSISTENT"]},{"name":"PERSISTENT","description":"io.river.connector.jms.model.DeliveryMode.PERSISTENT","location":"connectors/jms/io.river.connector.jms.model/-delivery-mode/-p-e-r-s-i-s-t-e-n-t/index.html","searchKeys":["PERSISTENT","PERSISTENT","io.river.connector.jms.model.DeliveryMode.PERSISTENT"]},{"name":"SESSION_TRANSACTED","description":"io.river.connector.jms.model.SessionMode.SESSION_TRANSACTED","location":"connectors/jms/io.river.connector.jms.model/-session-mode/-s-e-s-s-i-o-n_-t-r-a-n-s-a-c-t-e-d/index.html","searchKeys":["SESSION_TRANSACTED","SESSION_TRANSACTED","io.river.connector.jms.model.SessionMode.SESSION_TRANSACTED"]},{"name":"class Boolean(value: Boolean) : JmsPrimitive<Boolean> ","description":"io.river.connector.jms.model.JmsPrimitive.Boolean","location":"connectors/jms/io.river.connector.jms.model/-jms-primitive/-boolean/index.html","searchKeys":["Boolean","class Boolean(value: Boolean) : JmsPrimitive<Boolean> ","io.river.connector.jms.model.JmsPrimitive.Boolean"]},{"name":"class Bytes(value: ByteArray) : JmsPrimitive<ByteArray> ","description":"io.river.connector.jms.model.JmsPrimitive.Bytes","location":"connectors/jms/io.river.connector.jms.model/-jms-primitive/-bytes/index.html","searchKeys":["Bytes","class Bytes(value: ByteArray) : JmsPrimitive<ByteArray> ","io.river.connector.jms.model.JmsPrimitive.Bytes"]},{"name":"class Bytes(value: ByteArray, val correlationId: String? = null, val replyTo: JmsDestination? = null, val deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, val properties: Map<String, JmsPrimitive<*>> = emptyMap()) : JmsMessage","description":"io.river.connector.jms.model.JmsMessage.Bytes","location":"connectors/jms/io.river.connector.jms.model/-jms-message/-bytes/index.html","searchKeys":["Bytes","class Bytes(value: ByteArray, val correlationId: String? = null, val replyTo: JmsDestination? = null, val deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, val properties: Map<String, JmsPrimitive<*>> = emptyMap()) : JmsMessage","io.river.connector.jms.model.JmsMessage.Bytes"]},{"name":"class CommitableBytesMessage(inner: BytesMessage, coAcknowledge: suspend () -> Unit) : CommitableMessage, BytesMessage","description":"io.river.connector.jms.model.CommitableMessage.CommitableBytesMessage","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/-commitable-bytes-message/index.html","searchKeys":["CommitableBytesMessage","class CommitableBytesMessage(inner: BytesMessage, coAcknowledge: suspend () -> Unit) : CommitableMessage, BytesMessage","io.river.connector.jms.model.CommitableMessage.CommitableBytesMessage"]},{"name":"class CommitableMapMessage(inner: MapMessage, coAcknowledge: suspend () -> Unit) : CommitableMessage, MapMessage","description":"io.river.connector.jms.model.CommitableMessage.CommitableMapMessage","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/-commitable-map-message/index.html","searchKeys":["CommitableMapMessage","class CommitableMapMessage(inner: MapMessage, coAcknowledge: suspend () -> Unit) : CommitableMessage, MapMessage","io.river.connector.jms.model.CommitableMessage.CommitableMapMessage"]},{"name":"class CommitableObjectMessage(inner: ObjectMessage, coAcknowledge: suspend () -> Unit) : CommitableMessage, ObjectMessage","description":"io.river.connector.jms.model.CommitableMessage.CommitableObjectMessage","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/-commitable-object-message/index.html","searchKeys":["CommitableObjectMessage","class CommitableObjectMessage(inner: ObjectMessage, coAcknowledge: suspend () -> Unit) : CommitableMessage, ObjectMessage","io.river.connector.jms.model.CommitableMessage.CommitableObjectMessage"]},{"name":"class CommitableTextMessage(inner: TextMessage, coAcknowledge: suspend () -> Unit) : CommitableMessage, TextMessage","description":"io.river.connector.jms.model.CommitableMessage.CommitableTextMessage","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/-commitable-text-message/index.html","searchKeys":["CommitableTextMessage","class CommitableTextMessage(inner: TextMessage, coAcknowledge: suspend () -> Unit) : CommitableMessage, TextMessage","io.river.connector.jms.model.CommitableMessage.CommitableTextMessage"]},{"name":"class DefaultMessage(inner: Message, coAcknowledge: suspend () -> Unit) : CommitableMessage, Message","description":"io.river.connector.jms.model.CommitableMessage.DefaultMessage","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/-default-message/index.html","searchKeys":["DefaultMessage","class DefaultMessage(inner: Message, coAcknowledge: suspend () -> Unit) : CommitableMessage, Message","io.river.connector.jms.model.CommitableMessage.DefaultMessage"]},{"name":"class Double(value: Double) : JmsPrimitive<Double> ","description":"io.river.connector.jms.model.JmsPrimitive.Double","location":"connectors/jms/io.river.connector.jms.model/-jms-primitive/-double/index.html","searchKeys":["Double","class Double(value: Double) : JmsPrimitive<Double> ","io.river.connector.jms.model.JmsPrimitive.Double"]},{"name":"class Float(value: Float) : JmsPrimitive<Float> ","description":"io.river.connector.jms.model.JmsPrimitive.Float","location":"connectors/jms/io.river.connector.jms.model/-jms-primitive/-float/index.html","searchKeys":["Float","class Float(value: Float) : JmsPrimitive<Float> ","io.river.connector.jms.model.JmsPrimitive.Float"]},{"name":"class Int(value: Int) : JmsPrimitive<Int> ","description":"io.river.connector.jms.model.JmsPrimitive.Int","location":"connectors/jms/io.river.connector.jms.model/-jms-primitive/-int/index.html","searchKeys":["Int","class Int(value: Int) : JmsPrimitive<Int> ","io.river.connector.jms.model.JmsPrimitive.Int"]},{"name":"class Long(value: Long) : JmsPrimitive<Long> ","description":"io.river.connector.jms.model.JmsPrimitive.Long","location":"connectors/jms/io.river.connector.jms.model/-jms-primitive/-long/index.html","searchKeys":["Long","class Long(value: Long) : JmsPrimitive<Long> ","io.river.connector.jms.model.JmsPrimitive.Long"]},{"name":"class Map(value: Map<String, JmsPrimitive<*>>, val correlationId: String? = null, val replyTo: JmsDestination? = null, val deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, val properties: Map<String, JmsPrimitive<*>> = emptyMap()) : JmsMessage","description":"io.river.connector.jms.model.JmsMessage.Map","location":"connectors/jms/io.river.connector.jms.model/-jms-message/-map/index.html","searchKeys":["Map","class Map(value: Map<String, JmsPrimitive<*>>, val correlationId: String? = null, val replyTo: JmsDestination? = null, val deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, val properties: Map<String, JmsPrimitive<*>> = emptyMap()) : JmsMessage","io.river.connector.jms.model.JmsMessage.Map"]},{"name":"class Object(value: Serializable, val correlationId: String? = null, val replyTo: JmsDestination? = null, val deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, val properties: Map<String, JmsPrimitive<*>> = emptyMap()) : JmsMessage","description":"io.river.connector.jms.model.JmsMessage.Object","location":"connectors/jms/io.river.connector.jms.model/-jms-message/-object/index.html","searchKeys":["Object","class Object(value: Serializable, val correlationId: String? = null, val replyTo: JmsDestination? = null, val deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, val properties: Map<String, JmsPrimitive<*>> = emptyMap()) : JmsMessage","io.river.connector.jms.model.JmsMessage.Object"]},{"name":"class Queue(name: String) : JmsDestination","description":"io.river.connector.jms.model.JmsDestination.Queue","location":"connectors/jms/io.river.connector.jms.model/-jms-destination/-queue/index.html","searchKeys":["Queue","class Queue(name: String) : JmsDestination","io.river.connector.jms.model.JmsDestination.Queue"]},{"name":"class Text(value: String) : JmsPrimitive<String> ","description":"io.river.connector.jms.model.JmsPrimitive.Text","location":"connectors/jms/io.river.connector.jms.model/-jms-primitive/-text/index.html","searchKeys":["Text","class Text(value: String) : JmsPrimitive<String> ","io.river.connector.jms.model.JmsPrimitive.Text"]},{"name":"class Text(value: String, val correlationId: String? = null, val replyTo: JmsDestination? = null, val deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, val properties: Map<String, JmsPrimitive<*>> = emptyMap()) : JmsMessage","description":"io.river.connector.jms.model.JmsMessage.Text","location":"connectors/jms/io.river.connector.jms.model/-jms-message/-text/index.html","searchKeys":["Text","class Text(value: String, val correlationId: String? = null, val replyTo: JmsDestination? = null, val deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, val properties: Map<String, JmsPrimitive<*>> = emptyMap()) : JmsMessage","io.river.connector.jms.model.JmsMessage.Text"]},{"name":"class Topic(name: String) : JmsDestination","description":"io.river.connector.jms.model.JmsDestination.Topic","location":"connectors/jms/io.river.connector.jms.model/-jms-destination/-topic/index.html","searchKeys":["Topic","class Topic(name: String) : JmsDestination","io.river.connector.jms.model.JmsDestination.Topic"]},{"name":"data class Credentials(val username: String, val password: String)","description":"io.river.connector.jms.model.Credentials","location":"connectors/jms/io.river.connector.jms.model/-credentials/index.html","searchKeys":["Credentials","data class Credentials(val username: String, val password: String)","io.river.connector.jms.model.Credentials"]},{"name":"enum DeliveryMode : Enum<DeliveryMode> ","description":"io.river.connector.jms.model.DeliveryMode","location":"connectors/jms/io.river.connector.jms.model/-delivery-mode/index.html","searchKeys":["DeliveryMode","enum DeliveryMode : Enum<DeliveryMode> ","io.river.connector.jms.model.DeliveryMode"]},{"name":"enum SessionMode : Enum<SessionMode> ","description":"io.river.connector.jms.model.SessionMode","location":"connectors/jms/io.river.connector.jms.model/-session-mode/index.html","searchKeys":["SessionMode","enum SessionMode : Enum<SessionMode> ","io.river.connector.jms.model.SessionMode"]},{"name":"fun Boolean(value: Boolean)","description":"io.river.connector.jms.model.JmsPrimitive.Boolean.Boolean","location":"connectors/jms/io.river.connector.jms.model/-jms-primitive/-boolean/-boolean.html","searchKeys":["Boolean","fun Boolean(value: Boolean)","io.river.connector.jms.model.JmsPrimitive.Boolean.Boolean"]},{"name":"fun Bytes(value: ByteArray)","description":"io.river.connector.jms.model.JmsPrimitive.Bytes.Bytes","location":"connectors/jms/io.river.connector.jms.model/-jms-primitive/-bytes/-bytes.html","searchKeys":["Bytes","fun Bytes(value: ByteArray)","io.river.connector.jms.model.JmsPrimitive.Bytes.Bytes"]},{"name":"fun Bytes(value: ByteArray, correlationId: String? = null, replyTo: JmsDestination? = null, deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, properties: Map<String, JmsPrimitive<*>> = emptyMap())","description":"io.river.connector.jms.model.JmsMessage.Bytes.Bytes","location":"connectors/jms/io.river.connector.jms.model/-jms-message/-bytes/-bytes.html","searchKeys":["Bytes","fun Bytes(value: ByteArray, correlationId: String? = null, replyTo: JmsDestination? = null, deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, properties: Map<String, JmsPrimitive<*>> = emptyMap())","io.river.connector.jms.model.JmsMessage.Bytes.Bytes"]},{"name":"fun CommitableBytesMessage(inner: BytesMessage, coAcknowledge: suspend () -> Unit)","description":"io.river.connector.jms.model.CommitableMessage.CommitableBytesMessage.CommitableBytesMessage","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/-commitable-bytes-message/-commitable-bytes-message.html","searchKeys":["CommitableBytesMessage","fun CommitableBytesMessage(inner: BytesMessage, coAcknowledge: suspend () -> Unit)","io.river.connector.jms.model.CommitableMessage.CommitableBytesMessage.CommitableBytesMessage"]},{"name":"fun CommitableMapMessage(inner: MapMessage, coAcknowledge: suspend () -> Unit)","description":"io.river.connector.jms.model.CommitableMessage.CommitableMapMessage.CommitableMapMessage","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/-commitable-map-message/-commitable-map-message.html","searchKeys":["CommitableMapMessage","fun CommitableMapMessage(inner: MapMessage, coAcknowledge: suspend () -> Unit)","io.river.connector.jms.model.CommitableMessage.CommitableMapMessage.CommitableMapMessage"]},{"name":"fun CommitableObjectMessage(inner: ObjectMessage, coAcknowledge: suspend () -> Unit)","description":"io.river.connector.jms.model.CommitableMessage.CommitableObjectMessage.CommitableObjectMessage","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/-commitable-object-message/-commitable-object-message.html","searchKeys":["CommitableObjectMessage","fun CommitableObjectMessage(inner: ObjectMessage, coAcknowledge: suspend () -> Unit)","io.river.connector.jms.model.CommitableMessage.CommitableObjectMessage.CommitableObjectMessage"]},{"name":"fun CommitableTextMessage(inner: TextMessage, coAcknowledge: suspend () -> Unit)","description":"io.river.connector.jms.model.CommitableMessage.CommitableTextMessage.CommitableTextMessage","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/-commitable-text-message/-commitable-text-message.html","searchKeys":["CommitableTextMessage","fun CommitableTextMessage(inner: TextMessage, coAcknowledge: suspend () -> Unit)","io.river.connector.jms.model.CommitableMessage.CommitableTextMessage.CommitableTextMessage"]},{"name":"fun ConnectionFactory.consume(queueName: String, credentials: Credentials? = null, sessionMode: SessionMode = SessionMode.CLIENT_ACKNOWLEDGE, pollingMaxWait: Duration = 10.seconds, parallelism: Int = 1): Flow<CommitableMessage>","description":"io.river.connector.jms.consume","location":"connectors/jms/io.river.connector.jms/consume.html","searchKeys":["consume","fun ConnectionFactory.consume(queueName: String, credentials: Credentials? = null, sessionMode: SessionMode = SessionMode.CLIENT_ACKNOWLEDGE, pollingMaxWait: Duration = 10.seconds, parallelism: Int = 1): Flow<CommitableMessage>","io.river.connector.jms.consume"]},{"name":"fun ConnectionFactory.sendToDestination(destination: JmsDestination, upstream: Flow<JmsMessage>, parallelism: Int = 1, credentials: Credentials? = null): Flow<Unit>","description":"io.river.connector.jms.sendToDestination","location":"connectors/jms/io.river.connector.jms/send-to-destination.html","searchKeys":["sendToDestination","fun ConnectionFactory.sendToDestination(destination: JmsDestination, upstream: Flow<JmsMessage>, parallelism: Int = 1, credentials: Credentials? = null): Flow<Unit>","io.river.connector.jms.sendToDestination"]},{"name":"fun Credentials(username: String, password: String)","description":"io.river.connector.jms.model.Credentials.Credentials","location":"connectors/jms/io.river.connector.jms.model/-credentials/-credentials.html","searchKeys":["Credentials","fun Credentials(username: String, password: String)","io.river.connector.jms.model.Credentials.Credentials"]},{"name":"fun DefaultMessage(inner: Message, coAcknowledge: suspend () -> Unit)","description":"io.river.connector.jms.model.CommitableMessage.DefaultMessage.DefaultMessage","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/-default-message/-default-message.html","searchKeys":["DefaultMessage","fun DefaultMessage(inner: Message, coAcknowledge: suspend () -> Unit)","io.river.connector.jms.model.CommitableMessage.DefaultMessage.DefaultMessage"]},{"name":"fun Double(value: Double)","description":"io.river.connector.jms.model.JmsPrimitive.Double.Double","location":"connectors/jms/io.river.connector.jms.model/-jms-primitive/-double/-double.html","searchKeys":["Double","fun Double(value: Double)","io.river.connector.jms.model.JmsPrimitive.Double.Double"]},{"name":"fun Float(value: Float)","description":"io.river.connector.jms.model.JmsPrimitive.Float.Float","location":"connectors/jms/io.river.connector.jms.model/-jms-primitive/-float/-float.html","searchKeys":["Float","fun Float(value: Float)","io.river.connector.jms.model.JmsPrimitive.Float.Float"]},{"name":"fun Int(value: Int)","description":"io.river.connector.jms.model.JmsPrimitive.Int.Int","location":"connectors/jms/io.river.connector.jms.model/-jms-primitive/-int/-int.html","searchKeys":["Int","fun Int(value: Int)","io.river.connector.jms.model.JmsPrimitive.Int.Int"]},{"name":"fun Long(value: Long)","description":"io.river.connector.jms.model.JmsPrimitive.Long.Long","location":"connectors/jms/io.river.connector.jms.model/-jms-primitive/-long/-long.html","searchKeys":["Long","fun Long(value: Long)","io.river.connector.jms.model.JmsPrimitive.Long.Long"]},{"name":"fun Map(value: Map<String, JmsPrimitive<*>>, correlationId: String? = null, replyTo: JmsDestination? = null, deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, properties: Map<String, JmsPrimitive<*>> = emptyMap())","description":"io.river.connector.jms.model.JmsMessage.Map.Map","location":"connectors/jms/io.river.connector.jms.model/-jms-message/-map/-map.html","searchKeys":["Map","fun Map(value: Map<String, JmsPrimitive<*>>, correlationId: String? = null, replyTo: JmsDestination? = null, deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, properties: Map<String, JmsPrimitive<*>> = emptyMap())","io.river.connector.jms.model.JmsMessage.Map.Map"]},{"name":"fun Object(value: Serializable, correlationId: String? = null, replyTo: JmsDestination? = null, deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, properties: Map<String, JmsPrimitive<*>> = emptyMap())","description":"io.river.connector.jms.model.JmsMessage.Object.Object","location":"connectors/jms/io.river.connector.jms.model/-jms-message/-object/-object.html","searchKeys":["Object","fun Object(value: Serializable, correlationId: String? = null, replyTo: JmsDestination? = null, deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, properties: Map<String, JmsPrimitive<*>> = emptyMap())","io.river.connector.jms.model.JmsMessage.Object.Object"]},{"name":"fun Queue(name: String)","description":"io.river.connector.jms.model.JmsDestination.Queue.Queue","location":"connectors/jms/io.river.connector.jms.model/-jms-destination/-queue/-queue.html","searchKeys":["Queue","fun Queue(name: String)","io.river.connector.jms.model.JmsDestination.Queue.Queue"]},{"name":"fun Text(value: String)","description":"io.river.connector.jms.model.JmsPrimitive.Text.Text","location":"connectors/jms/io.river.connector.jms.model/-jms-primitive/-text/-text.html","searchKeys":["Text","fun Text(value: String)","io.river.connector.jms.model.JmsPrimitive.Text.Text"]},{"name":"fun Text(value: String, correlationId: String? = null, replyTo: JmsDestination? = null, deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, properties: Map<String, JmsPrimitive<*>> = emptyMap())","description":"io.river.connector.jms.model.JmsMessage.Text.Text","location":"connectors/jms/io.river.connector.jms.model/-jms-message/-text/-text.html","searchKeys":["Text","fun Text(value: String, correlationId: String? = null, replyTo: JmsDestination? = null, deliveryMode: DeliveryMode = DeliveryMode.PERSISTENT, properties: Map<String, JmsPrimitive<*>> = emptyMap())","io.river.connector.jms.model.JmsMessage.Text.Text"]},{"name":"fun Topic(name: String)","description":"io.river.connector.jms.model.JmsDestination.Topic.Topic","location":"connectors/jms/io.river.connector.jms.model/-jms-destination/-topic/-topic.html","searchKeys":["Topic","fun Topic(name: String)","io.river.connector.jms.model.JmsDestination.Topic.Topic"]},{"name":"fun valueOf(value: String): DeliveryMode","description":"io.river.connector.jms.model.DeliveryMode.valueOf","location":"connectors/jms/io.river.connector.jms.model/-delivery-mode/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): DeliveryMode","io.river.connector.jms.model.DeliveryMode.valueOf"]},{"name":"fun valueOf(value: String): SessionMode","description":"io.river.connector.jms.model.SessionMode.valueOf","location":"connectors/jms/io.river.connector.jms.model/-session-mode/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): SessionMode","io.river.connector.jms.model.SessionMode.valueOf"]},{"name":"fun values(): Array<DeliveryMode>","description":"io.river.connector.jms.model.DeliveryMode.values","location":"connectors/jms/io.river.connector.jms.model/-delivery-mode/values.html","searchKeys":["values","fun values(): Array<DeliveryMode>","io.river.connector.jms.model.DeliveryMode.values"]},{"name":"fun values(): Array<SessionMode>","description":"io.river.connector.jms.model.SessionMode.values","location":"connectors/jms/io.river.connector.jms.model/-session-mode/values.html","searchKeys":["values","fun values(): Array<SessionMode>","io.river.connector.jms.model.SessionMode.values"]},{"name":"object Companion","description":"io.river.connector.jms.model.CommitableMessage.Companion","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/-companion/index.html","searchKeys":["Companion","object Companion","io.river.connector.jms.model.CommitableMessage.Companion"]},{"name":"open override fun acknowledge()","description":"io.river.connector.jms.model.CommitableMessage.CommitableBytesMessage.acknowledge","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/-commitable-bytes-message/acknowledge.html","searchKeys":["acknowledge","open override fun acknowledge()","io.river.connector.jms.model.CommitableMessage.CommitableBytesMessage.acknowledge"]},{"name":"open override fun acknowledge()","description":"io.river.connector.jms.model.CommitableMessage.CommitableMapMessage.acknowledge","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/-commitable-map-message/acknowledge.html","searchKeys":["acknowledge","open override fun acknowledge()","io.river.connector.jms.model.CommitableMessage.CommitableMapMessage.acknowledge"]},{"name":"open override fun acknowledge()","description":"io.river.connector.jms.model.CommitableMessage.CommitableObjectMessage.acknowledge","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/-commitable-object-message/acknowledge.html","searchKeys":["acknowledge","open override fun acknowledge()","io.river.connector.jms.model.CommitableMessage.CommitableObjectMessage.acknowledge"]},{"name":"open override fun acknowledge()","description":"io.river.connector.jms.model.CommitableMessage.CommitableTextMessage.acknowledge","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/-commitable-text-message/acknowledge.html","searchKeys":["acknowledge","open override fun acknowledge()","io.river.connector.jms.model.CommitableMessage.CommitableTextMessage.acknowledge"]},{"name":"open override fun acknowledge()","description":"io.river.connector.jms.model.CommitableMessage.DefaultMessage.acknowledge","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/-default-message/acknowledge.html","searchKeys":["acknowledge","open override fun acknowledge()","io.river.connector.jms.model.CommitableMessage.DefaultMessage.acknowledge"]},{"name":"operator fun invoke(message: Message, ack: suspend () -> Unit): CommitableMessage","description":"io.river.connector.jms.model.CommitableMessage.Companion.invoke","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(message: Message, ack: suspend () -> Unit): CommitableMessage","io.river.connector.jms.model.CommitableMessage.Companion.invoke"]},{"name":"sealed class CommitableMessage : Message","description":"io.river.connector.jms.model.CommitableMessage","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/index.html","searchKeys":["CommitableMessage","sealed class CommitableMessage : Message","io.river.connector.jms.model.CommitableMessage"]},{"name":"sealed class JmsDestination","description":"io.river.connector.jms.model.JmsDestination","location":"connectors/jms/io.river.connector.jms.model/-jms-destination/index.html","searchKeys":["JmsDestination","sealed class JmsDestination","io.river.connector.jms.model.JmsDestination"]},{"name":"sealed class JmsMessage","description":"io.river.connector.jms.model.JmsMessage","location":"connectors/jms/io.river.connector.jms.model/-jms-message/index.html","searchKeys":["JmsMessage","sealed class JmsMessage","io.river.connector.jms.model.JmsMessage"]},{"name":"sealed class JmsPrimitive<T>","description":"io.river.connector.jms.model.JmsPrimitive","location":"connectors/jms/io.river.connector.jms.model/-jms-primitive/index.html","searchKeys":["JmsPrimitive","sealed class JmsPrimitive<T>","io.river.connector.jms.model.JmsPrimitive"]},{"name":"suspend fun coAcknowledge()","description":"io.river.connector.jms.model.CommitableMessage.coAcknowledge","location":"connectors/jms/io.river.connector.jms.model/-commitable-message/co-acknowledge.html","searchKeys":["coAcknowledge","suspend fun coAcknowledge()","io.river.connector.jms.model.CommitableMessage.coAcknowledge"]},{"name":"val correlationId: String? = null","description":"io.river.connector.jms.model.JmsMessage.correlationId","location":"connectors/jms/io.river.connector.jms.model/-jms-message/correlation-id.html","searchKeys":["correlationId","val correlationId: String? = null","io.river.connector.jms.model.JmsMessage.correlationId"]},{"name":"val deliveryMode: DeliveryMode","description":"io.river.connector.jms.model.JmsMessage.deliveryMode","location":"connectors/jms/io.river.connector.jms.model/-jms-message/delivery-mode.html","searchKeys":["deliveryMode","val deliveryMode: DeliveryMode","io.river.connector.jms.model.JmsMessage.deliveryMode"]},{"name":"val destination: JMSContext.() -> Destination","description":"io.river.connector.jms.model.JmsDestination.destination","location":"connectors/jms/io.river.connector.jms.model/-jms-destination/destination.html","searchKeys":["destination","val destination: JMSContext.() -> Destination","io.river.connector.jms.model.JmsDestination.destination"]},{"name":"val password: String","description":"io.river.connector.jms.model.Credentials.password","location":"connectors/jms/io.river.connector.jms.model/-credentials/password.html","searchKeys":["password","val password: String","io.river.connector.jms.model.Credentials.password"]},{"name":"val properties: Map<String, JmsPrimitive<*>>","description":"io.river.connector.jms.model.JmsMessage.properties","location":"connectors/jms/io.river.connector.jms.model/-jms-message/properties.html","searchKeys":["properties","val properties: Map<String, JmsPrimitive<*>>","io.river.connector.jms.model.JmsMessage.properties"]},{"name":"val replyTo: JmsDestination? = null","description":"io.river.connector.jms.model.JmsMessage.replyTo","location":"connectors/jms/io.river.connector.jms.model/-jms-message/reply-to.html","searchKeys":["replyTo","val replyTo: JmsDestination? = null","io.river.connector.jms.model.JmsMessage.replyTo"]},{"name":"val username: String","description":"io.river.connector.jms.model.Credentials.username","location":"connectors/jms/io.river.connector.jms.model/-credentials/username.html","searchKeys":["username","val username: String","io.river.connector.jms.model.Credentials.username"]},{"name":"val value: Int","description":"io.river.connector.jms.model.DeliveryMode.value","location":"connectors/jms/io.river.connector.jms.model/-delivery-mode/value.html","searchKeys":["value","val value: Int","io.river.connector.jms.model.DeliveryMode.value"]},{"name":"val value: Int","description":"io.river.connector.jms.model.SessionMode.value","location":"connectors/jms/io.river.connector.jms.model/-session-mode/value.html","searchKeys":["value","val value: Int","io.river.connector.jms.model.SessionMode.value"]},{"name":"val value: T","description":"io.river.connector.jms.model.JmsPrimitive.value","location":"connectors/jms/io.river.connector.jms.model/-jms-primitive/value.html","searchKeys":["value","val value: T","io.river.connector.jms.model.JmsPrimitive.value"]},{"name":"fun <T> Flow<String>.parseCsv(delimiter: String = \";\", f: (List<String>) -> T): Flow<T>","description":"io.river.connector.format.csv.parseCsv","location":"connectors/format/csv/io.river.connector.format.csv/parse-csv.html","searchKeys":["parseCsv","fun <T> Flow<String>.parseCsv(delimiter: String = \";\", f: (List<String>) -> T): Flow<T>","io.river.connector.format.csv.parseCsv"]},{"name":"fun <T> Flow<String>.parseCsvWithHeaders(delimiter: String = \";\", f: (Map<String, String>) -> T): Flow<T>","description":"io.river.connector.format.csv.parseCsvWithHeaders","location":"connectors/format/csv/io.river.connector.format.csv/parse-csv-with-headers.html","searchKeys":["parseCsvWithHeaders","fun <T> Flow<String>.parseCsvWithHeaders(delimiter: String = \";\", f: (Map<String, String>) -> T): Flow<T>","io.river.connector.format.csv.parseCsvWithHeaders"]},{"name":"fun <T> Flow<T>.rawCsv(headers: List<String>, delimiter: String = \";\", f: (T) -> List<String>): Flow<String>","description":"io.river.connector.format.csv.rawCsv","location":"connectors/format/csv/io.river.connector.format.csv/raw-csv.html","searchKeys":["rawCsv","fun <T> Flow<T>.rawCsv(headers: List<String>, delimiter: String = \";\", f: (T) -> List<String>): Flow<String>","io.river.connector.format.csv.rawCsv"]},{"name":"fun <T> Flow<T>.rawCsv(vararg headers: String, delimiter: String = \";\", f: (T) -> List<String>): Flow<String>","description":"io.river.connector.format.csv.rawCsv","location":"connectors/format/csv/io.river.connector.format.csv/raw-csv.html","searchKeys":["rawCsv","fun <T> Flow<T>.rawCsv(vararg headers: String, delimiter: String = \";\", f: (T) -> List<String>): Flow<String>","io.river.connector.format.csv.rawCsv"]},{"name":"fun Flow<String>.parseCsv(delimiter: String = \";\"): Flow<List<String>>","description":"io.river.connector.format.csv.parseCsv","location":"connectors/format/csv/io.river.connector.format.csv/parse-csv.html","searchKeys":["parseCsv","fun Flow<String>.parseCsv(delimiter: String = \";\"): Flow<List<String>>","io.river.connector.format.csv.parseCsv"]},{"name":"fun Flow<String>.parseCsvWithHeaders(delimiter: String = \";\"): Flow<Map<String, String>>","description":"io.river.connector.format.csv.parseCsvWithHeaders","location":"connectors/format/csv/io.river.connector.format.csv/parse-csv-with-headers.html","searchKeys":["parseCsvWithHeaders","fun Flow<String>.parseCsvWithHeaders(delimiter: String = \";\"): Flow<Map<String, String>>","io.river.connector.format.csv.parseCsvWithHeaders"]},{"name":"inline fun <T> Flow<T>.csv(appendHeader: Boolean = true, delimiter: String = \";\"): Flow<String>","description":"io.river.connector.format.csv.csv","location":"connectors/format/csv/io.river.connector.format.csv/csv.html","searchKeys":["csv","inline fun <T> Flow<T>.csv(appendHeader: Boolean = true, delimiter: String = \";\"): Flow<String>","io.river.connector.format.csv.csv"]},{"name":"abstract suspend fun borrow(): ObjectPool.ObjectHolder<T>","description":"io.river.util.pool.ObjectPool.borrow","location":"utils/pool/io.river.util.pool/-object-pool/borrow.html","searchKeys":["borrow","abstract suspend fun borrow(): ObjectPool.ObjectHolder<T>","io.river.util.pool.ObjectPool.borrow"]},{"name":"abstract suspend fun close()","description":"io.river.util.pool.ObjectPool.close","location":"utils/pool/io.river.util.pool/-object-pool/close.html","searchKeys":["close","abstract suspend fun close()","io.river.util.pool.ObjectPool.close"]},{"name":"abstract suspend fun release(holder: ObjectPool.ObjectHolder<T>)","description":"io.river.util.pool.ObjectPool.release","location":"utils/pool/io.river.util.pool/-object-pool/release.html","searchKeys":["release","abstract suspend fun release(holder: ObjectPool.ObjectHolder<T>)","io.river.util.pool.ObjectPool.release"]},{"name":"class DefaultObjectPool<T>(size: Int, maxDuration: Duration, initial: List<T>, val factory: suspend () -> T, val onClose: suspend (T) -> Unit) : ObjectPool<T> ","description":"io.river.util.pool.DefaultObjectPool","location":"utils/pool/io.river.util.pool/-default-object-pool/index.html","searchKeys":["DefaultObjectPool","class DefaultObjectPool<T>(size: Int, maxDuration: Duration, initial: List<T>, val factory: suspend () -> T, val onClose: suspend (T) -> Unit) : ObjectPool<T> ","io.river.util.pool.DefaultObjectPool"]},{"name":"class ObjectHolder<T>(val instance: T, val maxDuration: Duration, val createdAt: ZonedDateTime)","description":"io.river.util.pool.ObjectPool.ObjectHolder","location":"utils/pool/io.river.util.pool/-object-pool/-object-holder/index.html","searchKeys":["ObjectHolder","class ObjectHolder<T>(val instance: T, val maxDuration: Duration, val createdAt: ZonedDateTime)","io.river.util.pool.ObjectPool.ObjectHolder"]},{"name":"fun <T> DefaultObjectPool(size: Int, maxDuration: Duration, initial: List<T>, factory: suspend () -> T, onClose: suspend (T) -> Unit)","description":"io.river.util.pool.DefaultObjectPool.DefaultObjectPool","location":"utils/pool/io.river.util.pool/-default-object-pool/-default-object-pool.html","searchKeys":["DefaultObjectPool","fun <T> DefaultObjectPool(size: Int, maxDuration: Duration, initial: List<T>, factory: suspend () -> T, onClose: suspend (T) -> Unit)","io.river.util.pool.DefaultObjectPool.DefaultObjectPool"]},{"name":"fun <T> ObjectHolder(instance: T, maxDuration: Duration, createdAt: ZonedDateTime)","description":"io.river.util.pool.ObjectPool.ObjectHolder.ObjectHolder","location":"utils/pool/io.river.util.pool/-object-pool/-object-holder/-object-holder.html","searchKeys":["ObjectHolder","fun <T> ObjectHolder(instance: T, maxDuration: Duration, createdAt: ZonedDateTime)","io.river.util.pool.ObjectPool.ObjectHolder.ObjectHolder"]},{"name":"fun <T> sized(maxSize: Int, maxDuration: Duration = 5.minutes, onClose: suspend (T) -> Unit = {}, factory: suspend () -> T): ObjectPool<T>","description":"io.river.util.pool.ObjectPool.Companion.sized","location":"utils/pool/io.river.util.pool/-object-pool/-companion/sized.html","searchKeys":["sized","fun <T> sized(maxSize: Int, maxDuration: Duration = 5.minutes, onClose: suspend (T) -> Unit = {}, factory: suspend () -> T): ObjectPool<T>","io.river.util.pool.ObjectPool.Companion.sized"]},{"name":"fun shouldBeClosed(): Boolean","description":"io.river.util.pool.ObjectPool.ObjectHolder.shouldBeClosed","location":"utils/pool/io.river.util.pool/-object-pool/-object-holder/should-be-closed.html","searchKeys":["shouldBeClosed","fun shouldBeClosed(): Boolean","io.river.util.pool.ObjectPool.ObjectHolder.shouldBeClosed"]},{"name":"interface ObjectPool<T>","description":"io.river.util.pool.ObjectPool","location":"utils/pool/io.river.util.pool/-object-pool/index.html","searchKeys":["ObjectPool","interface ObjectPool<T>","io.river.util.pool.ObjectPool"]},{"name":"object Companion","description":"io.river.util.pool.ObjectPool.Companion","location":"utils/pool/io.river.util.pool/-object-pool/-companion/index.html","searchKeys":["Companion","object Companion","io.river.util.pool.ObjectPool.Companion"]},{"name":"open suspend fun <R> use(f: suspend (T) -> R): R","description":"io.river.util.pool.ObjectPool.use","location":"utils/pool/io.river.util.pool/-object-pool/use.html","searchKeys":["use","open suspend fun <R> use(f: suspend (T) -> R): R","io.river.util.pool.ObjectPool.use"]},{"name":"open suspend override fun borrow(): ObjectPool.ObjectHolder<T>","description":"io.river.util.pool.DefaultObjectPool.borrow","location":"utils/pool/io.river.util.pool/-default-object-pool/borrow.html","searchKeys":["borrow","open suspend override fun borrow(): ObjectPool.ObjectHolder<T>","io.river.util.pool.DefaultObjectPool.borrow"]},{"name":"open suspend override fun close()","description":"io.river.util.pool.DefaultObjectPool.close","location":"utils/pool/io.river.util.pool/-default-object-pool/close.html","searchKeys":["close","open suspend override fun close()","io.river.util.pool.DefaultObjectPool.close"]},{"name":"open suspend override fun release(holder: ObjectPool.ObjectHolder<T>)","description":"io.river.util.pool.DefaultObjectPool.release","location":"utils/pool/io.river.util.pool/-default-object-pool/release.html","searchKeys":["release","open suspend override fun release(holder: ObjectPool.ObjectHolder<T>)","io.river.util.pool.DefaultObjectPool.release"]},{"name":"suspend fun <T> sized(maxSize: Int, initialSize: Int = 1, maxDuration: Duration = 5.minutes, onClose: suspend (T) -> Unit = {}, factory: suspend () -> T): ObjectPool<T>","description":"io.river.util.pool.ObjectPool.Companion.sized","location":"utils/pool/io.river.util.pool/-object-pool/-companion/sized.html","searchKeys":["sized","suspend fun <T> sized(maxSize: Int, initialSize: Int = 1, maxDuration: Duration = 5.minutes, onClose: suspend (T) -> Unit = {}, factory: suspend () -> T): ObjectPool<T>","io.river.util.pool.ObjectPool.Companion.sized"]},{"name":"val createdAt: ZonedDateTime","description":"io.river.util.pool.ObjectPool.ObjectHolder.createdAt","location":"utils/pool/io.river.util.pool/-object-pool/-object-holder/created-at.html","searchKeys":["createdAt","val createdAt: ZonedDateTime","io.river.util.pool.ObjectPool.ObjectHolder.createdAt"]},{"name":"val factory: suspend () -> T","description":"io.river.util.pool.DefaultObjectPool.factory","location":"utils/pool/io.river.util.pool/-default-object-pool/factory.html","searchKeys":["factory","val factory: suspend () -> T","io.river.util.pool.DefaultObjectPool.factory"]},{"name":"val instance: T","description":"io.river.util.pool.ObjectPool.ObjectHolder.instance","location":"utils/pool/io.river.util.pool/-object-pool/-object-holder/instance.html","searchKeys":["instance","val instance: T","io.river.util.pool.ObjectPool.ObjectHolder.instance"]},{"name":"val maxDuration: Duration","description":"io.river.util.pool.ObjectPool.ObjectHolder.maxDuration","location":"utils/pool/io.river.util.pool/-object-pool/-object-holder/max-duration.html","searchKeys":["maxDuration","val maxDuration: Duration","io.river.util.pool.ObjectPool.ObjectHolder.maxDuration"]},{"name":"val onClose: suspend (T) -> Unit","description":"io.river.util.pool.DefaultObjectPool.onClose","location":"utils/pool/io.river.util.pool/-default-object-pool/on-close.html","searchKeys":["onClose","val onClose: suspend (T) -> Unit","io.river.util.pool.DefaultObjectPool.onClose"]},{"name":"Drop","description":"io.river.core.ThrottleStrategy.Drop","location":"core/io.river.core/-throttle-strategy/-drop/index.html","searchKeys":["Drop","Drop","io.river.core.ThrottleStrategy.Drop"]},{"name":"Suspend","description":"io.river.core.ThrottleStrategy.Suspend","location":"core/io.river.core/-throttle-strategy/-suspend/index.html","searchKeys":["Suspend","Suspend","io.river.core.ThrottleStrategy.Suspend"]},{"name":"abstract operator fun invoke(info: ParallelismInfo): ParallelismInfo","description":"io.river.core.ParallelismIncreaseStrategy.invoke","location":"core/io.river.core/-parallelism-increase-strategy/invoke.html","searchKeys":["invoke","abstract operator fun invoke(info: ParallelismInfo): ParallelismInfo","io.river.core.ParallelismIncreaseStrategy.invoke"]},{"name":"class ConcurrencyInfo(totalSlots: Int, semaphore: Semaphore)","description":"io.river.core.ConcurrencyInfo","location":"core/io.river.core/-concurrency-info/index.html","searchKeys":["ConcurrencyInfo","class ConcurrencyInfo(totalSlots: Int, semaphore: Semaphore)","io.river.core.ConcurrencyInfo"]},{"name":"class Count(val size: Int) : ChunkStrategy","description":"io.river.core.ChunkStrategy.Count","location":"core/io.river.core/-chunk-strategy/-count/index.html","searchKeys":["Count","class Count(val size: Int) : ChunkStrategy","io.river.core.ChunkStrategy.Count"]},{"name":"class TimeWindow(val size: Int, val duration: Duration) : ChunkStrategy","description":"io.river.core.ChunkStrategy.TimeWindow","location":"core/io.river.core/-chunk-strategy/-time-window/index.html","searchKeys":["TimeWindow","class TimeWindow(val size: Int, val duration: Duration) : ChunkStrategy","io.river.core.ChunkStrategy.TimeWindow"]},{"name":"data class ParallelismInfo(val maxAllowedParallelism: Int, val currentParallelism: Int)","description":"io.river.core.ParallelismInfo","location":"core/io.river.core/-parallelism-info/index.html","searchKeys":["ParallelismInfo","data class ParallelismInfo(val maxAllowedParallelism: Int, val currentParallelism: Int)","io.river.core.ParallelismInfo"]},{"name":"enum ThrottleStrategy : Enum<ThrottleStrategy> ","description":"io.river.core.ThrottleStrategy","location":"core/io.river.core/-throttle-strategy/index.html","searchKeys":["ThrottleStrategy","enum ThrottleStrategy : Enum<ThrottleStrategy> ","io.river.core.ThrottleStrategy"]},{"name":"fun <E, F, S, T> Flow<E>.broadcast(firstFlowMap: Flow<E>.() -> Flow<F>, secondFlowMap: Flow<E>.() -> Flow<S>, thirdFlowMap: Flow<E>.() -> Flow<T>, buffer: Int = Channel.BUFFERED, scope: CoroutineScope = CoroutineScope(Dispatchers.Default)): Flow<Triple<F, S, T>>","description":"io.river.core.broadcast","location":"core/io.river.core/broadcast.html","searchKeys":["broadcast","fun <E, F, S, T> Flow<E>.broadcast(firstFlowMap: Flow<E>.() -> Flow<F>, secondFlowMap: Flow<E>.() -> Flow<S>, thirdFlowMap: Flow<E>.() -> Flow<T>, buffer: Int = Channel.BUFFERED, scope: CoroutineScope = CoroutineScope(Dispatchers.Default)): Flow<Triple<F, S, T>>","io.river.core.broadcast"]},{"name":"fun <E, F, S> Flow<E>.broadcast(firstFlowMap: Flow<E>.() -> Flow<F>, secondFlowMap: Flow<E>.() -> Flow<S>, buffer: Int = Channel.BUFFERED, scope: CoroutineScope = CoroutineScope(Dispatchers.Default)): Flow<Pair<F, S>>","description":"io.river.core.broadcast","location":"core/io.river.core/broadcast.html","searchKeys":["broadcast","fun <E, F, S> Flow<E>.broadcast(firstFlowMap: Flow<E>.() -> Flow<F>, secondFlowMap: Flow<E>.() -> Flow<S>, buffer: Int = Channel.BUFFERED, scope: CoroutineScope = CoroutineScope(Dispatchers.Default)): Flow<Pair<F, S>>","io.river.core.broadcast"]},{"name":"fun <E, S> Flow<E>.alsoTo(bufferCapacity: Int = Channel.BUFFERED, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND, onUndeliveredElement: (E) -> Unit? = null, scope: CoroutineScope = CoroutineScope(Dispatchers.Default), flow: Flow<E>.() -> Flow<S>): Flow<E>","description":"io.river.core.alsoTo","location":"core/io.river.core/also-to.html","searchKeys":["alsoTo","fun <E, S> Flow<E>.alsoTo(bufferCapacity: Int = Channel.BUFFERED, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND, onUndeliveredElement: (E) -> Unit? = null, scope: CoroutineScope = CoroutineScope(Dispatchers.Default), flow: Flow<E>.() -> Flow<S>): Flow<E>","io.river.core.alsoTo"]},{"name":"fun <T, R> Flow<Iterable<T>>.flatMapParallel(concurrencyLevel: Int, f: suspend ConcurrencyInfo.(Iterable<T>) -> Iterable<R>): Flow<R>","description":"io.river.core.flatMapParallel","location":"core/io.river.core/flat-map-parallel.html","searchKeys":["flatMapParallel","fun <T, R> Flow<Iterable<T>>.flatMapParallel(concurrencyLevel: Int, f: suspend ConcurrencyInfo.(Iterable<T>) -> Iterable<R>): Flow<R>","io.river.core.flatMapParallel"]},{"name":"fun <T, R> Flow<Iterable<T>>.unorderedFlatMapParallel(concurrencyLevel: Int, f: suspend ConcurrencyInfo.(Iterable<T>) -> Iterable<R>): Flow<R>","description":"io.river.core.unorderedFlatMapParallel","location":"core/io.river.core/unordered-flat-map-parallel.html","searchKeys":["unorderedFlatMapParallel","fun <T, R> Flow<Iterable<T>>.unorderedFlatMapParallel(concurrencyLevel: Int, f: suspend ConcurrencyInfo.(Iterable<T>) -> Iterable<R>): Flow<R>","io.river.core.unorderedFlatMapParallel"]},{"name":"fun <T, R> Flow<T>.mapParallel(concurrencyLevel: Int, transform: suspend ConcurrencyInfo.(T) -> R): Flow<R>","description":"io.river.core.mapParallel","location":"core/io.river.core/map-parallel.html","searchKeys":["mapParallel","fun <T, R> Flow<T>.mapParallel(concurrencyLevel: Int, transform: suspend ConcurrencyInfo.(T) -> R): Flow<R>","io.river.core.mapParallel"]},{"name":"fun <T, R> Flow<T>.unorderedMapParallel(concurrencyLevel: Int, f: suspend ConcurrencyInfo.(T) -> R): Flow<R>","description":"io.river.core.unorderedMapParallel","location":"core/io.river.core/unordered-map-parallel.html","searchKeys":["unorderedMapParallel","fun <T, R> Flow<T>.unorderedMapParallel(concurrencyLevel: Int, f: suspend ConcurrencyInfo.(T) -> R): Flow<R>","io.river.core.unorderedMapParallel"]},{"name":"fun <T> Flow<Iterable<T>>.flatten(): Flow<T>","description":"io.river.core.flatten","location":"core/io.river.core/flatten.html","searchKeys":["flatten","fun <T> Flow<Iterable<T>>.flatten(): Flow<T>","io.river.core.flatten"]},{"name":"fun <T> Flow<T>.broadcast(number: Int, buffer: Int = Channel.BUFFERED, scope: CoroutineScope = CoroutineScope(Dispatchers.Default)): List<Flow<T>>","description":"io.river.core.broadcast","location":"core/io.river.core/broadcast.html","searchKeys":["broadcast","fun <T> Flow<T>.broadcast(number: Int, buffer: Int = Channel.BUFFERED, scope: CoroutineScope = CoroutineScope(Dispatchers.Default)): List<Flow<T>>","io.river.core.broadcast"]},{"name":"fun <T> Flow<T>.catchAndEmitLast(f: FlowCollector<T>.(Throwable) -> T): Flow<T>","description":"io.river.core.catchAndEmitLast","location":"core/io.river.core/catch-and-emit-last.html","searchKeys":["catchAndEmitLast","fun <T> Flow<T>.catchAndEmitLast(f: FlowCollector<T>.(Throwable) -> T): Flow<T>","io.river.core.catchAndEmitLast"]},{"name":"fun <T> Flow<T>.chunked(size: Int): Flow<List<T>>","description":"io.river.core.chunked","location":"core/io.river.core/chunked.html","searchKeys":["chunked","fun <T> Flow<T>.chunked(size: Int): Flow<List<T>>","io.river.core.chunked"]},{"name":"fun <T> Flow<T>.chunked(strategy: ChunkStrategy): Flow<List<T>>","description":"io.river.core.chunked","location":"core/io.river.core/chunked.html","searchKeys":["chunked","fun <T> Flow<T>.chunked(strategy: ChunkStrategy): Flow<List<T>>","io.river.core.chunked"]},{"name":"fun <T> Flow<T>.collectAsync(scope: CoroutineScope = CoroutineScope(Dispatchers.Default), collector: FlowCollector<T> = FlowCollector { }): Job","description":"io.river.core.collectAsync","location":"core/io.river.core/collect-async.html","searchKeys":["collectAsync","fun <T> Flow<T>.collectAsync(scope: CoroutineScope = CoroutineScope(Dispatchers.Default), collector: FlowCollector<T> = FlowCollector { }): Job","io.river.core.collectAsync"]},{"name":"fun <T> Flow<T>.delay(duration: Duration): Flow<T>","description":"io.river.core.delay","location":"core/io.river.core/delay.html","searchKeys":["delay","fun <T> Flow<T>.delay(duration: Duration): Flow<T>","io.river.core.delay"]},{"name":"fun <T> Flow<T>.earlyCompleteIf(stopPredicate: suspend (T) -> Boolean): Flow<T>","description":"io.river.core.earlyCompleteIf","location":"core/io.river.core/early-complete-if.html","searchKeys":["earlyCompleteIf","fun <T> Flow<T>.earlyCompleteIf(stopPredicate: suspend (T) -> Boolean): Flow<T>","io.river.core.earlyCompleteIf"]},{"name":"fun <T> Flow<T>.intersperse(between: T): Flow<T>","description":"io.river.core.intersperse","location":"core/io.river.core/intersperse.html","searchKeys":["intersperse","fun <T> Flow<T>.intersperse(between: T): Flow<T>","io.river.core.intersperse"]},{"name":"fun <T> Flow<T>.intersperse(start: T? = null, between: T, end: T? = null): Flow<T>","description":"io.river.core.intersperse","location":"core/io.river.core/intersperse.html","searchKeys":["intersperse","fun <T> Flow<T>.intersperse(start: T? = null, between: T, end: T? = null): Flow<T>","io.river.core.intersperse"]},{"name":"fun <T> Flow<T>.throttle(elementsPerInterval: Int, interval: Duration, strategy: ThrottleStrategy = ThrottleStrategy.Suspend): Flow<T>","description":"io.river.core.throttle","location":"core/io.river.core/throttle.html","searchKeys":["throttle","fun <T> Flow<T>.throttle(elementsPerInterval: Int, interval: Duration, strategy: ThrottleStrategy = ThrottleStrategy.Suspend): Flow<T>","io.river.core.throttle"]},{"name":"fun <T> Flow<T>.timeout(duration: Duration): Flow<T>","description":"io.river.core.timeout","location":"core/io.river.core/timeout.html","searchKeys":["timeout","fun <T> Flow<T>.timeout(duration: Duration): Flow<T>","io.river.core.timeout"]},{"name":"fun <T> Flow<T>.windowedChunk(size: Int, duration: Duration): Flow<List<T>>","description":"io.river.core.windowedChunk","location":"core/io.river.core/windowed-chunk.html","searchKeys":["windowedChunk","fun <T> Flow<T>.windowedChunk(size: Int, duration: Duration): Flow<List<T>>","io.river.core.windowedChunk"]},{"name":"fun <T> flowOf(item: suspend () -> T): Flow<T>","description":"io.river.core.flowOf","location":"core/io.river.core/flow-of.html","searchKeys":["flowOf","fun <T> flowOf(item: suspend () -> T): Flow<T>","io.river.core.flowOf"]},{"name":"fun <T> repeat(item: T): Flow<T>","description":"io.river.core.repeat","location":"core/io.river.core/repeat.html","searchKeys":["repeat","fun <T> repeat(item: T): Flow<T>","io.river.core.repeat"]},{"name":"fun <T> stoppableFlow(block: suspend StoppableFlowCollector<T>.() -> Unit): Flow<T>","description":"io.river.core.stoppableFlow","location":"core/io.river.core/stoppable-flow.html","searchKeys":["stoppableFlow","fun <T> stoppableFlow(block: suspend StoppableFlowCollector<T>.() -> Unit): Flow<T>","io.river.core.stoppableFlow"]},{"name":"fun <T> unfold(stopOnEmptyList: Boolean = false, unfolder: suspend ParallelismInfo.() -> List<T>): Flow<T>","description":"io.river.core.unfold","location":"core/io.river.core/unfold.html","searchKeys":["unfold","fun <T> unfold(stopOnEmptyList: Boolean = false, unfolder: suspend ParallelismInfo.() -> List<T>): Flow<T>","io.river.core.unfold"]},{"name":"fun <T> unfoldParallel(maxParallelism: Int, stopOnEmptyList: Boolean = false, minimumParallelism: Int = 1, increaseStrategy: ParallelismIncreaseStrategy = ParallelismIncreaseStrategy.ByOne, unfolder: suspend ParallelismInfo.() -> List<T>): Flow<T>","description":"io.river.core.unfoldParallel","location":"core/io.river.core/unfold-parallel.html","searchKeys":["unfoldParallel","fun <T> unfoldParallel(maxParallelism: Int, stopOnEmptyList: Boolean = false, minimumParallelism: Int = 1, increaseStrategy: ParallelismIncreaseStrategy = ParallelismIncreaseStrategy.ByOne, unfolder: suspend ParallelismInfo.() -> List<T>): Flow<T>","io.river.core.unfoldParallel"]},{"name":"fun ConcurrencyInfo(totalSlots: Int, semaphore: Semaphore)","description":"io.river.core.ConcurrencyInfo.ConcurrencyInfo","location":"core/io.river.core/-concurrency-info/-concurrency-info.html","searchKeys":["ConcurrencyInfo","fun ConcurrencyInfo(totalSlots: Int, semaphore: Semaphore)","io.river.core.ConcurrencyInfo.ConcurrencyInfo"]},{"name":"fun CoroutineScope.tick(intervalDuration: Duration, f: suspend () -> Unit): Job","description":"io.river.core.tick","location":"core/io.river.core/tick.html","searchKeys":["tick","fun CoroutineScope.tick(intervalDuration: Duration, f: suspend () -> Unit): Job","io.river.core.tick"]},{"name":"fun Count(size: Int)","description":"io.river.core.ChunkStrategy.Count.Count","location":"core/io.river.core/-chunk-strategy/-count/-count.html","searchKeys":["Count","fun Count(size: Int)","io.river.core.ChunkStrategy.Count.Count"]},{"name":"fun Flow<ByteArray>.asByteBuffer(): Flow<ByteBuffer>","description":"io.river.core.asByteBuffer","location":"core/io.river.core/as-byte-buffer.html","searchKeys":["asByteBuffer","fun Flow<ByteArray>.asByteBuffer(): Flow<ByteBuffer>","io.river.core.asByteBuffer"]},{"name":"fun Flow<ByteBuffer>.asByteArray(): Flow<ByteArray>","description":"io.river.core.asByteArray","location":"core/io.river.core/as-byte-array.html","searchKeys":["asByteArray","fun Flow<ByteBuffer>.asByteArray(): Flow<ByteArray>","io.river.core.asByteArray"]},{"name":"fun Flow<List<ByteBuffer>>.flattenAsByteArray(): Flow<ByteArray>","description":"io.river.core.flattenAsByteArray","location":"core/io.river.core/flatten-as-byte-array.html","searchKeys":["flattenAsByteArray","fun Flow<List<ByteBuffer>>.flattenAsByteArray(): Flow<ByteArray>","io.river.core.flattenAsByteArray"]},{"name":"fun Flow<String>.asByteArray(charset: Charset = Charset.defaultCharset()): Flow<ByteArray>","description":"io.river.core.asByteArray","location":"core/io.river.core/as-byte-array.html","searchKeys":["asByteArray","fun Flow<String>.asByteArray(charset: Charset = Charset.defaultCharset()): Flow<ByteArray>","io.river.core.asByteArray"]},{"name":"fun Flow<String>.asByteBuffer(charset: Charset = Charset.defaultCharset()): Flow<ByteBuffer>","description":"io.river.core.asByteBuffer","location":"core/io.river.core/as-byte-buffer.html","searchKeys":["asByteBuffer","fun Flow<String>.asByteBuffer(charset: Charset = Charset.defaultCharset()): Flow<ByteBuffer>","io.river.core.asByteBuffer"]},{"name":"fun Flow<String>.asBytes(charset: Charset = Charset.defaultCharset()): Flow<Byte>","description":"io.river.core.asBytes","location":"core/io.river.core/as-bytes.html","searchKeys":["asBytes","fun Flow<String>.asBytes(charset: Charset = Charset.defaultCharset()): Flow<Byte>","io.river.core.asBytes"]},{"name":"fun Flow<String>.lines(): Flow<String>","description":"io.river.core.lines","location":"core/io.river.core/lines.html","searchKeys":["lines","fun Flow<String>.lines(): Flow<String>","io.river.core.lines"]},{"name":"fun ParallelismInfo(maxAllowedParallelism: Int, currentParallelism: Int)","description":"io.river.core.ParallelismInfo.ParallelismInfo","location":"core/io.river.core/-parallelism-info/-parallelism-info.html","searchKeys":["ParallelismInfo","fun ParallelismInfo(maxAllowedParallelism: Int, currentParallelism: Int)","io.river.core.ParallelismInfo.ParallelismInfo"]},{"name":"fun TimeWindow(size: Int, duration: Duration)","description":"io.river.core.ChunkStrategy.TimeWindow.TimeWindow","location":"core/io.river.core/-chunk-strategy/-time-window/-time-window.html","searchKeys":["TimeWindow","fun TimeWindow(size: Int, duration: Duration)","io.river.core.ChunkStrategy.TimeWindow.TimeWindow"]},{"name":"fun by(f: (ParallelismInfo) -> Int): ParallelismIncreaseStrategy","description":"io.river.core.ParallelismIncreaseStrategy.Companion.by","location":"core/io.river.core/-parallelism-increase-strategy/-companion/by.html","searchKeys":["by","fun by(f: (ParallelismInfo) -> Int): ParallelismIncreaseStrategy","io.river.core.ParallelismIncreaseStrategy.Companion.by"]},{"name":"fun interface ParallelismIncreaseStrategy","description":"io.river.core.ParallelismIncreaseStrategy","location":"core/io.river.core/-parallelism-increase-strategy/index.html","searchKeys":["ParallelismIncreaseStrategy","fun interface ParallelismIncreaseStrategy","io.river.core.ParallelismIncreaseStrategy"]},{"name":"fun valueOf(value: String): ThrottleStrategy","description":"io.river.core.ThrottleStrategy.valueOf","location":"core/io.river.core/-throttle-strategy/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): ThrottleStrategy","io.river.core.ThrottleStrategy.valueOf"]},{"name":"fun values(): Array<ThrottleStrategy>","description":"io.river.core.ThrottleStrategy.values","location":"core/io.river.core/-throttle-strategy/values.html","searchKeys":["values","fun values(): Array<ThrottleStrategy>","io.river.core.ThrottleStrategy.values"]},{"name":"infix fun <T> List<CompletableDeferred<T>>.completeAll(values: List<T>): Boolean","description":"io.river.core.completeAll","location":"core/io.river.core/complete-all.html","searchKeys":["completeAll","infix fun <T> List<CompletableDeferred<T>>.completeAll(values: List<T>): Boolean","io.river.core.completeAll"]},{"name":"infix fun <T> List<CompletableDeferred<T>>.completeAllWith(result: Result<List<T>>): Boolean","description":"io.river.core.completeAllWith","location":"core/io.river.core/complete-all-with.html","searchKeys":["completeAllWith","infix fun <T> List<CompletableDeferred<T>>.completeAllWith(result: Result<List<T>>): Boolean","io.river.core.completeAllWith"]},{"name":"inline fun <T, R> Flow<T>.via(flow: Flow<T>.() -> Flow<R>): Flow<R>","description":"io.river.core.via","location":"core/io.river.core/via.html","searchKeys":["via","inline fun <T, R> Flow<T>.via(flow: Flow<T>.() -> Flow<R>): Flow<R>","io.river.core.via"]},{"name":"inline fun <T> Flow<T>.onEachParallel(concurrencyLevel: Int, crossinline f: suspend ConcurrencyInfo.(T) -> Unit): Flow<T>","description":"io.river.core.onEachParallel","location":"core/io.river.core/on-each-parallel.html","searchKeys":["onEachParallel","inline fun <T> Flow<T>.onEachParallel(concurrencyLevel: Int, crossinline f: suspend ConcurrencyInfo.(T) -> Unit): Flow<T>","io.river.core.onEachParallel"]},{"name":"inline fun <T> Flow<T>.unorderedOnEachParallel(concurrencyLevel: Int, crossinline f: suspend ConcurrencyInfo.(T) -> Unit): Flow<T>","description":"io.river.core.unorderedOnEachParallel","location":"core/io.river.core/unordered-on-each-parallel.html","searchKeys":["unorderedOnEachParallel","inline fun <T> Flow<T>.unorderedOnEachParallel(concurrencyLevel: Int, crossinline f: suspend ConcurrencyInfo.(T) -> Unit): Flow<T>","io.river.core.unorderedOnEachParallel"]},{"name":"inline suspend fun <T> Flow<T>.collectParallel(concurrencyLevel: Int, crossinline f: suspend ConcurrencyInfo.(T) -> Unit)","description":"io.river.core.collectParallel","location":"core/io.river.core/collect-parallel.html","searchKeys":["collectParallel","inline suspend fun <T> Flow<T>.collectParallel(concurrencyLevel: Int, crossinline f: suspend ConcurrencyInfo.(T) -> Unit)","io.river.core.collectParallel"]},{"name":"inline suspend fun <T> Flow<T>.unorderedCollectParallel(concurrencyLevel: Int, crossinline f: suspend ConcurrencyInfo.(T) -> Unit)","description":"io.river.core.unorderedCollectParallel","location":"core/io.river.core/unordered-collect-parallel.html","searchKeys":["unorderedCollectParallel","inline suspend fun <T> Flow<T>.unorderedCollectParallel(concurrencyLevel: Int, crossinline f: suspend ConcurrencyInfo.(T) -> Unit)","io.river.core.unorderedCollectParallel"]},{"name":"interface ChunkStrategy","description":"io.river.core.ChunkStrategy","location":"core/io.river.core/-chunk-strategy/index.html","searchKeys":["ChunkStrategy","interface ChunkStrategy","io.river.core.ChunkStrategy"]},{"name":"interface StoppableFlowCollector<T> : FlowCollector<T> ","description":"io.river.core.StoppableFlowCollector","location":"core/io.river.core/-stoppable-flow-collector/index.html","searchKeys":["StoppableFlowCollector","interface StoppableFlowCollector<T> : FlowCollector<T> ","io.river.core.StoppableFlowCollector"]},{"name":"object Companion","description":"io.river.core.ParallelismIncreaseStrategy.Companion","location":"core/io.river.core/-parallelism-increase-strategy/-companion/index.html","searchKeys":["Companion","object Companion","io.river.core.ParallelismIncreaseStrategy.Companion"]},{"name":"object Companion","description":"io.river.core.StoppableFlowCollector.Companion","location":"core/io.river.core/-stoppable-flow-collector/-companion/index.html","searchKeys":["Companion","object Companion","io.river.core.StoppableFlowCollector.Companion"]},{"name":"open suspend fun halt(msg: String = \"cancelling flow\"): Nothing","description":"io.river.core.StoppableFlowCollector.halt","location":"core/io.river.core/-stoppable-flow-collector/halt.html","searchKeys":["halt","open suspend fun halt(msg: String = \"cancelling flow\"): Nothing","io.river.core.StoppableFlowCollector.halt"]},{"name":"operator fun <T, R : T> Flow<T>.plus(other: Flow<R>): Flow<T>","description":"io.river.core.plus","location":"core/io.river.core/plus.html","searchKeys":["plus","operator fun <T, R : T> Flow<T>.plus(other: Flow<R>): Flow<T>","io.river.core.plus"]},{"name":"operator fun <T> invoke(outer: FlowCollector<T>): StoppableFlowCollector<T>","description":"io.river.core.StoppableFlowCollector.Companion.invoke","location":"core/io.river.core/-stoppable-flow-collector/-companion/invoke.html","searchKeys":["invoke","operator fun <T> invoke(outer: FlowCollector<T>): StoppableFlowCollector<T>","io.river.core.StoppableFlowCollector.Companion.invoke"]},{"name":"suspend fun <T, R> Iterable<T>.flatMapParallel(concurrency: Int, f: suspend (T) -> Iterable<R>): List<R>","description":"io.river.core.flatMapParallel","location":"core/io.river.core/flat-map-parallel.html","searchKeys":["flatMapParallel","suspend fun <T, R> Iterable<T>.flatMapParallel(concurrency: Int, f: suspend (T) -> Iterable<R>): List<R>","io.river.core.flatMapParallel"]},{"name":"suspend fun <T, R> Iterable<T>.flatMapParallel(f: suspend (T) -> Iterable<R>): List<R>","description":"io.river.core.flatMapParallel","location":"core/io.river.core/flat-map-parallel.html","searchKeys":["flatMapParallel","suspend fun <T, R> Iterable<T>.flatMapParallel(f: suspend (T) -> Iterable<R>): List<R>","io.river.core.flatMapParallel"]},{"name":"suspend fun <T, R> Iterable<T>.mapParallel(concurrency: Int, f: suspend ConcurrencyInfo.(T) -> R): List<R>","description":"io.river.core.mapParallel","location":"core/io.river.core/map-parallel.html","searchKeys":["mapParallel","suspend fun <T, R> Iterable<T>.mapParallel(concurrency: Int, f: suspend ConcurrencyInfo.(T) -> R): List<R>","io.river.core.mapParallel"]},{"name":"suspend fun <T, R> Iterable<T>.mapParallel(f: suspend (T) -> R): List<R>","description":"io.river.core.mapParallel","location":"core/io.river.core/map-parallel.html","searchKeys":["mapParallel","suspend fun <T, R> Iterable<T>.mapParallel(f: suspend (T) -> R): List<R>","io.river.core.mapParallel"]},{"name":"suspend fun <T> Flow<T>.collectCatching(collector: FlowCollector<T> = FlowCollector { }): Result<Unit>","description":"io.river.core.collectCatching","location":"core/io.river.core/collect-catching.html","searchKeys":["collectCatching","suspend fun <T> Flow<T>.collectCatching(collector: FlowCollector<T> = FlowCollector { }): Result<Unit>","io.river.core.collectCatching"]},{"name":"suspend fun <T> Flow<T>.collectWithTimeout(duration: Duration, collector: FlowCollector<T> = FlowCollector { })","description":"io.river.core.collectWithTimeout","location":"core/io.river.core/collect-with-timeout.html","searchKeys":["collectWithTimeout","suspend fun <T> Flow<T>.collectWithTimeout(duration: Duration, collector: FlowCollector<T> = FlowCollector { })","io.river.core.collectWithTimeout"]},{"name":"suspend fun <T> Flow<T>.countOnWindow(duration: Duration): Int","description":"io.river.core.countOnWindow","location":"core/io.river.core/count-on-window.html","searchKeys":["countOnWindow","suspend fun <T> Flow<T>.countOnWindow(duration: Duration): Int","io.river.core.countOnWindow"]},{"name":"suspend fun <T> Flow<T>.joinToString(between: String, f: suspend (T) -> String): String","description":"io.river.core.joinToString","location":"core/io.river.core/join-to-string.html","searchKeys":["joinToString","suspend fun <T> Flow<T>.joinToString(between: String, f: suspend (T) -> String): String","io.river.core.joinToString"]},{"name":"suspend fun <T> Flow<T>.joinToString(f: suspend (T) -> String = { it.toString() }): String","description":"io.river.core.joinToString","location":"core/io.river.core/join-to-string.html","searchKeys":["joinToString","suspend fun <T> Flow<T>.joinToString(f: suspend (T) -> String = { it.toString() }): String","io.river.core.joinToString"]},{"name":"suspend fun <T> Flow<T>.joinToString(start: String, between: String, end: String, f: suspend (T) -> String): String","description":"io.river.core.joinToString","location":"core/io.river.core/join-to-string.html","searchKeys":["joinToString","suspend fun <T> Flow<T>.joinToString(start: String, between: String, end: String, f: suspend (T) -> String): String","io.river.core.joinToString"]},{"name":"suspend fun <T> Flow<T>.toList(size: Int): List<T>","description":"io.river.core.toList","location":"core/io.river.core/to-list.html","searchKeys":["toList","suspend fun <T> Flow<T>.toList(size: Int): List<T>","io.river.core.toList"]},{"name":"suspend fun <T> Flow<T>.toList(size: Int, duration: Duration): List<T>","description":"io.river.core.toList","location":"core/io.river.core/to-list.html","searchKeys":["toList","suspend fun <T> Flow<T>.toList(size: Int, duration: Duration): List<T>","io.river.core.toList"]},{"name":"suspend fun Flow<BigDecimal>.sum(): BigDecimal","description":"io.river.core.sum","location":"core/io.river.core/sum.html","searchKeys":["sum","suspend fun Flow<BigDecimal>.sum(): BigDecimal","io.river.core.sum"]},{"name":"suspend fun Flow<Int>.sum(): Long","description":"io.river.core.sum","location":"core/io.river.core/sum.html","searchKeys":["sum","suspend fun Flow<Int>.sum(): Long","io.river.core.sum"]},{"name":"suspend fun Flow<Long>.sum(): Long","description":"io.river.core.sum","location":"core/io.river.core/sum.html","searchKeys":["sum","suspend fun Flow<Long>.sum(): Long","io.river.core.sum"]},{"name":"val ByOne: ParallelismIncreaseStrategy","description":"io.river.core.ParallelismIncreaseStrategy.Companion.ByOne","location":"core/io.river.core/-parallelism-increase-strategy/-companion/-by-one.html","searchKeys":["ByOne","val ByOne: ParallelismIncreaseStrategy","io.river.core.ParallelismIncreaseStrategy.Companion.ByOne"]},{"name":"val Exponential: ParallelismIncreaseStrategy","description":"io.river.core.ParallelismIncreaseStrategy.Companion.Exponential","location":"core/io.river.core/-parallelism-increase-strategy/-companion/-exponential.html","searchKeys":["Exponential","val Exponential: ParallelismIncreaseStrategy","io.river.core.ParallelismIncreaseStrategy.Companion.Exponential"]},{"name":"val MaxAllowedAfterReceive: ParallelismIncreaseStrategy","description":"io.river.core.ParallelismIncreaseStrategy.Companion.MaxAllowedAfterReceive","location":"core/io.river.core/-parallelism-increase-strategy/-companion/-max-allowed-after-receive.html","searchKeys":["MaxAllowedAfterReceive","val MaxAllowedAfterReceive: ParallelismIncreaseStrategy","io.river.core.ParallelismIncreaseStrategy.Companion.MaxAllowedAfterReceive"]},{"name":"val availableSlots: Int","description":"io.river.core.ConcurrencyInfo.availableSlots","location":"core/io.river.core/-concurrency-info/available-slots.html","searchKeys":["availableSlots","val availableSlots: Int","io.river.core.ConcurrencyInfo.availableSlots"]},{"name":"val currentParallelism: Int","description":"io.river.core.ParallelismInfo.currentParallelism","location":"core/io.river.core/-parallelism-info/current-parallelism.html","searchKeys":["currentParallelism","val currentParallelism: Int","io.river.core.ParallelismInfo.currentParallelism"]},{"name":"val duration: Duration","description":"io.river.core.ChunkStrategy.TimeWindow.duration","location":"core/io.river.core/-chunk-strategy/-time-window/duration.html","searchKeys":["duration","val duration: Duration","io.river.core.ChunkStrategy.TimeWindow.duration"]},{"name":"val maxAllowedParallelism: Int","description":"io.river.core.ParallelismInfo.maxAllowedParallelism","location":"core/io.river.core/-parallelism-info/max-allowed-parallelism.html","searchKeys":["maxAllowedParallelism","val maxAllowedParallelism: Int","io.river.core.ParallelismInfo.maxAllowedParallelism"]},{"name":"val percentageOfAvailableSlots: Int","description":"io.river.core.ConcurrencyInfo.percentageOfAvailableSlots","location":"core/io.river.core/-concurrency-info/percentage-of-available-slots.html","searchKeys":["percentageOfAvailableSlots","val percentageOfAvailableSlots: Int","io.river.core.ConcurrencyInfo.percentageOfAvailableSlots"]},{"name":"val size: Int","description":"io.river.core.ChunkStrategy.Count.size","location":"core/io.river.core/-chunk-strategy/-count/size.html","searchKeys":["size","val size: Int","io.river.core.ChunkStrategy.Count.size"]},{"name":"val size: Int","description":"io.river.core.ChunkStrategy.TimeWindow.size","location":"core/io.river.core/-chunk-strategy/-time-window/size.html","searchKeys":["size","val size: Int","io.river.core.ChunkStrategy.TimeWindow.size"]},{"name":"class RequestBuilder(val url: String, val method: String, var body: HttpRequest.BodyPublisher = BodyPublishers.noBody(), val query: MutableMap<String, List<String>> = mutableMapOf(), val headers: MutableMap<String, List<String>> = mutableMapOf(), var expectContinue: Boolean = false)","description":"io.river.util.http.RequestBuilder","location":"utils/http/io.river.util.http/-request-builder/index.html","searchKeys":["RequestBuilder","class RequestBuilder(val url: String, val method: String, var body: HttpRequest.BodyPublisher = BodyPublishers.noBody(), val query: MutableMap<String, List<String>> = mutableMapOf(), val headers: MutableMap<String, List<String>> = mutableMapOf(), var expectContinue: Boolean = false)","io.river.util.http.RequestBuilder"]},{"name":"fun <T> HttpResponse<Flow.Publisher<T>>.bodyAsFlow(): Flow<T>","description":"io.river.util.http.bodyAsFlow","location":"utils/http/io.river.util.http/body-as-flow.html","searchKeys":["bodyAsFlow","fun <T> HttpResponse<Flow.Publisher<T>>.bodyAsFlow(): Flow<T>","io.river.util.http.bodyAsFlow"]},{"name":"fun Flow<ByteBuffer>.asBodyPublisher(contentLength: Long = 0): HttpRequest.BodyPublisher","description":"io.river.util.http.asBodyPublisher","location":"utils/http/io.river.util.http/as-body-publisher.html","searchKeys":["asBodyPublisher","fun Flow<ByteBuffer>.asBodyPublisher(contentLength: Long = 0): HttpRequest.BodyPublisher","io.river.util.http.asBodyPublisher"]},{"name":"fun HttpResponse.BodyHandler<Flow.Publisher<List<ByteBuffer>>>.asFlow(): HttpResponse.BodyHandler<Flow<ByteBuffer>>","description":"io.river.util.http.asFlow","location":"utils/http/io.river.util.http/as-flow.html","searchKeys":["asFlow","fun HttpResponse.BodyHandler<Flow.Publisher<List<ByteBuffer>>>.asFlow(): HttpResponse.BodyHandler<Flow<ByteBuffer>>","io.river.util.http.asFlow"]},{"name":"fun RequestBuilder(url: String, method: String, body: HttpRequest.BodyPublisher = BodyPublishers.noBody(), query: MutableMap<String, List<String>> = mutableMapOf(), headers: MutableMap<String, List<String>> = mutableMapOf(), expectContinue: Boolean = false)","description":"io.river.util.http.RequestBuilder.RequestBuilder","location":"utils/http/io.river.util.http/-request-builder/-request-builder.html","searchKeys":["RequestBuilder","fun RequestBuilder(url: String, method: String, body: HttpRequest.BodyPublisher = BodyPublishers.noBody(), query: MutableMap<String, List<String>> = mutableMapOf(), headers: MutableMap<String, List<String>> = mutableMapOf(), expectContinue: Boolean = false)","io.river.util.http.RequestBuilder.RequestBuilder"]},{"name":"fun body(body: Flow.Publisher<ByteBuffer>, contentLength: Long? = null)","description":"io.river.util.http.RequestBuilder.body","location":"utils/http/io.river.util.http/-request-builder/body.html","searchKeys":["body","fun body(body: Flow.Publisher<ByteBuffer>, contentLength: Long? = null)","io.river.util.http.RequestBuilder.body"]},{"name":"fun body(body: Flow<ByteBuffer>, contentLength: Long? = null)","description":"io.river.util.http.RequestBuilder.body","location":"utils/http/io.river.util.http/-request-builder/body.html","searchKeys":["body","fun body(body: Flow<ByteBuffer>, contentLength: Long? = null)","io.river.util.http.RequestBuilder.body"]},{"name":"fun build(): HttpRequest","description":"io.river.util.http.RequestBuilder.build","location":"utils/http/io.river.util.http/-request-builder/build.html","searchKeys":["build","fun build(): HttpRequest","io.river.util.http.RequestBuilder.build"]},{"name":"fun byteArrayBody(body: Flow<ByteArray>, contentLength: Long? = null)","description":"io.river.util.http.RequestBuilder.byteArrayBody","location":"utils/http/io.river.util.http/-request-builder/byte-array-body.html","searchKeys":["byteArrayBody","fun byteArrayBody(body: Flow<ByteArray>, contentLength: Long? = null)","io.river.util.http.RequestBuilder.byteArrayBody"]},{"name":"fun contentType(s: String): List<String>?","description":"io.river.util.http.RequestBuilder.contentType","location":"utils/http/io.river.util.http/-request-builder/content-type.html","searchKeys":["contentType","fun contentType(s: String): List<String>?","io.river.util.http.RequestBuilder.contentType"]},{"name":"fun delete(url: String, f: RequestBuilder.() -> Unit = {}): HttpRequest","description":"io.river.util.http.delete","location":"utils/http/io.river.util.http/delete.html","searchKeys":["delete","fun delete(url: String, f: RequestBuilder.() -> Unit = {}): HttpRequest","io.river.util.http.delete"]},{"name":"fun get(url: String, f: RequestBuilder.() -> Unit = {}): HttpRequest","description":"io.river.util.http.get","location":"utils/http/io.river.util.http/get.html","searchKeys":["get","fun get(url: String, f: RequestBuilder.() -> Unit = {}): HttpRequest","io.river.util.http.get"]},{"name":"fun header(key: String, values: List<String>): List<String>?","description":"io.river.util.http.RequestBuilder.header","location":"utils/http/io.river.util.http/-request-builder/header.html","searchKeys":["header","fun header(key: String, values: List<String>): List<String>?","io.river.util.http.RequestBuilder.header"]},{"name":"fun header(key: String, vararg values: String): List<String>?","description":"io.river.util.http.RequestBuilder.header","location":"utils/http/io.river.util.http/-request-builder/header.html","searchKeys":["header","fun header(key: String, vararg values: String): List<String>?","io.river.util.http.RequestBuilder.header"]},{"name":"fun method(name: String, url: String, f: RequestBuilder.() -> Unit = {}): HttpRequest","description":"io.river.util.http.method","location":"utils/http/io.river.util.http/method.html","searchKeys":["method","fun method(name: String, url: String, f: RequestBuilder.() -> Unit = {}): HttpRequest","io.river.util.http.method"]},{"name":"fun patch(url: String, f: RequestBuilder.() -> Unit = {}): HttpRequest","description":"io.river.util.http.patch","location":"utils/http/io.river.util.http/patch.html","searchKeys":["patch","fun patch(url: String, f: RequestBuilder.() -> Unit = {}): HttpRequest","io.river.util.http.patch"]},{"name":"fun post(url: String, f: RequestBuilder.() -> Unit = {}): HttpRequest","description":"io.river.util.http.post","location":"utils/http/io.river.util.http/post.html","searchKeys":["post","fun post(url: String, f: RequestBuilder.() -> Unit = {}): HttpRequest","io.river.util.http.post"]},{"name":"fun put(url: String, f: RequestBuilder.() -> Unit = {}): HttpRequest","description":"io.river.util.http.put","location":"utils/http/io.river.util.http/put.html","searchKeys":["put","fun put(url: String, f: RequestBuilder.() -> Unit = {}): HttpRequest","io.river.util.http.put"]},{"name":"fun query(key: String, values: List<String>): List<String>?","description":"io.river.util.http.RequestBuilder.query","location":"utils/http/io.river.util.http/-request-builder/query.html","searchKeys":["query","fun query(key: String, values: List<String>): List<String>?","io.river.util.http.RequestBuilder.query"]},{"name":"fun query(key: String, vararg values: String?)","description":"io.river.util.http.RequestBuilder.query","location":"utils/http/io.river.util.http/-request-builder/query.html","searchKeys":["query","fun query(key: String, vararg values: String?)","io.river.util.http.RequestBuilder.query"]},{"name":"fun query(vararg parameters: Pair<String, String?>): List<Unit>","description":"io.river.util.http.RequestBuilder.query","location":"utils/http/io.river.util.http/-request-builder/query.html","searchKeys":["query","fun query(vararg parameters: Pair<String, String?>): List<Unit>","io.river.util.http.RequestBuilder.query"]},{"name":"fun stringBody(body: String)","description":"io.river.util.http.RequestBuilder.stringBody","location":"utils/http/io.river.util.http/-request-builder/string-body.html","searchKeys":["stringBody","fun stringBody(body: String)","io.river.util.http.RequestBuilder.stringBody"]},{"name":"suspend fun <T> HttpRequest.send(bodyHandler: HttpResponse.BodyHandler<T>, client: HttpClient = DefaultHttpClient): HttpResponse<T>","description":"io.river.util.http.send","location":"utils/http/io.river.util.http/send.html","searchKeys":["send","suspend fun <T> HttpRequest.send(bodyHandler: HttpResponse.BodyHandler<T>, client: HttpClient = DefaultHttpClient): HttpResponse<T>","io.river.util.http.send"]},{"name":"val headers: MutableMap<String, List<String>>","description":"io.river.util.http.RequestBuilder.headers","location":"utils/http/io.river.util.http/-request-builder/headers.html","searchKeys":["headers","val headers: MutableMap<String, List<String>>","io.river.util.http.RequestBuilder.headers"]},{"name":"val method: String","description":"io.river.util.http.RequestBuilder.method","location":"utils/http/io.river.util.http/-request-builder/method.html","searchKeys":["method","val method: String","io.river.util.http.RequestBuilder.method"]},{"name":"val ofByteArray: HttpResponse.BodyHandler<ByteArray>","description":"io.river.util.http.ofByteArray","location":"utils/http/io.river.util.http/of-byte-array.html","searchKeys":["ofByteArray","val ofByteArray: HttpResponse.BodyHandler<ByteArray>","io.river.util.http.ofByteArray"]},{"name":"val ofFlow: HttpResponse.BodyHandler<Flow<ByteBuffer>>","description":"io.river.util.http.ofFlow","location":"utils/http/io.river.util.http/of-flow.html","searchKeys":["ofFlow","val ofFlow: HttpResponse.BodyHandler<Flow<ByteBuffer>>","io.river.util.http.ofFlow"]},{"name":"val ofLines: HttpResponse.BodyHandler<Stream<String>>","description":"io.river.util.http.ofLines","location":"utils/http/io.river.util.http/of-lines.html","searchKeys":["ofLines","val ofLines: HttpResponse.BodyHandler<Stream<String>>","io.river.util.http.ofLines"]},{"name":"val ofString: HttpResponse.BodyHandler<String>","description":"io.river.util.http.ofString","location":"utils/http/io.river.util.http/of-string.html","searchKeys":["ofString","val ofString: HttpResponse.BodyHandler<String>","io.river.util.http.ofString"]},{"name":"val query: MutableMap<String, List<String>>","description":"io.river.util.http.RequestBuilder.query","location":"utils/http/io.river.util.http/-request-builder/query.html","searchKeys":["query","val query: MutableMap<String, List<String>>","io.river.util.http.RequestBuilder.query"]},{"name":"val url: String","description":"io.river.util.http.RequestBuilder.url","location":"utils/http/io.river.util.http/-request-builder/url.html","searchKeys":["url","val url: String","io.river.util.http.RequestBuilder.url"]},{"name":"var body: HttpRequest.BodyPublisher","description":"io.river.util.http.RequestBuilder.body","location":"utils/http/io.river.util.http/-request-builder/body.html","searchKeys":["body","var body: HttpRequest.BodyPublisher","io.river.util.http.RequestBuilder.body"]},{"name":"var expectContinue: Boolean = false","description":"io.river.util.http.RequestBuilder.expectContinue","location":"utils/http/io.river.util.http/-request-builder/expect-continue.html","searchKeys":["expectContinue","var expectContinue: Boolean = false","io.river.util.http.RequestBuilder.expectContinue"]},{"name":"fun Flow<ByteArray>.zipAsFile(name: String): Flow<Byte>","description":"io.river.connector.file.zipAsFile","location":"connectors/file/io.river.connector.file/zip-as-file.html","searchKeys":["zipAsFile","fun Flow<ByteArray>.zipAsFile(name: String): Flow<Byte>","io.river.connector.file.zipAsFile"]},{"name":"fun InputStream.asFlow(context: CoroutineContext = defaultContext): Flow<Byte>","description":"io.river.connector.file.asFlow","location":"connectors/file/io.river.connector.file/as-flow.html","searchKeys":["asFlow","fun InputStream.asFlow(context: CoroutineContext = defaultContext): Flow<Byte>","io.river.connector.file.asFlow"]},{"name":"fun Path.asFlow(vararg options: OpenOption): Flow<Byte>","description":"io.river.connector.file.asFlow","location":"connectors/file/io.river.connector.file/as-flow.html","searchKeys":["asFlow","fun Path.asFlow(vararg options: OpenOption): Flow<Byte>","io.river.connector.file.asFlow"]},{"name":"suspend fun Flow<ByteArray>.writeTo(context: CoroutineContext = defaultContext, outputStream: () -> OutputStream)","description":"io.river.connector.file.writeTo","location":"connectors/file/io.river.connector.file/write-to.html","searchKeys":["writeTo","suspend fun Flow<ByteArray>.writeTo(context: CoroutineContext = defaultContext, outputStream: () -> OutputStream)","io.river.connector.file.writeTo"]},{"name":"suspend fun Flow<ByteArray>.writeTo(path: Path, vararg options: OpenOption = arrayOf(\n        StandardOpenOption.WRITE,\n        StandardOpenOption.CREATE,\n        StandardOpenOption.APPEND\n    ))","description":"io.river.connector.file.writeTo","location":"connectors/file/io.river.connector.file/write-to.html","searchKeys":["writeTo","suspend fun Flow<ByteArray>.writeTo(path: Path, vararg options: OpenOption = arrayOf(\n        StandardOpenOption.WRITE,\n        StandardOpenOption.CREATE,\n        StandardOpenOption.APPEND\n    ))","io.river.connector.file.writeTo"]},{"name":"class Jdbc(connectionPoolSize: Int = 10, connectionFactory: () -> Connection)","description":"io.river.connector.rdbms.jdbc.Jdbc","location":"connectors/rdbms/jdbc/io.river.connector.rdbms.jdbc/-jdbc/index.html","searchKeys":["Jdbc","class Jdbc(connectionPoolSize: Int = 10, connectionFactory: () -> Connection)","io.river.connector.rdbms.jdbc.Jdbc"]},{"name":"fun <T> Jdbc.batchUpdate(sql: String, upstream: Flow<T>, parallelism: Int = 1, chunkStrategy: ChunkStrategy = TimeWindow(100, 250.milliseconds), prepare: suspend PreparedStatement.(T) -> Unit = {}): Flow<Int>","description":"io.river.connector.rdbms.jdbc.batchUpdate","location":"connectors/rdbms/jdbc/io.river.connector.rdbms.jdbc/batch-update.html","searchKeys":["batchUpdate","fun <T> Jdbc.batchUpdate(sql: String, upstream: Flow<T>, parallelism: Int = 1, chunkStrategy: ChunkStrategy = TimeWindow(100, 250.milliseconds), prepare: suspend PreparedStatement.(T) -> Unit = {}): Flow<Int>","io.river.connector.rdbms.jdbc.batchUpdate"]},{"name":"fun <T> Jdbc.singleUpdate(sql: String, upstream: Flow<T>, parallelism: Int = 1, prepare: suspend PreparedStatement.(T) -> Unit = {}): Flow<Int>","description":"io.river.connector.rdbms.jdbc.singleUpdate","location":"connectors/rdbms/jdbc/io.river.connector.rdbms.jdbc/single-update.html","searchKeys":["singleUpdate","fun <T> Jdbc.singleUpdate(sql: String, upstream: Flow<T>, parallelism: Int = 1, prepare: suspend PreparedStatement.(T) -> Unit = {}): Flow<Int>","io.river.connector.rdbms.jdbc.singleUpdate"]},{"name":"fun Jdbc(connectionPoolSize: Int = 10, connectionFactory: () -> Connection)","description":"io.river.connector.rdbms.jdbc.Jdbc.Jdbc","location":"connectors/rdbms/jdbc/io.river.connector.rdbms.jdbc/-jdbc/-jdbc.html","searchKeys":["Jdbc","fun Jdbc(connectionPoolSize: Int = 10, connectionFactory: () -> Connection)","io.river.connector.rdbms.jdbc.Jdbc.Jdbc"]},{"name":"fun Jdbc.query(sql: String, fetchSize: Int = 100, prepare: suspend PreparedStatement.() -> Unit = {}): Flow<Row>","description":"io.river.connector.rdbms.jdbc.query","location":"connectors/rdbms/jdbc/io.river.connector.rdbms.jdbc/query.html","searchKeys":["query","fun Jdbc.query(sql: String, fetchSize: Int = 100, prepare: suspend PreparedStatement.() -> Unit = {}): Flow<Row>","io.river.connector.rdbms.jdbc.query"]},{"name":"fun Jdbc.singleUpdate(sql: String, prepare: suspend PreparedStatement.() -> Unit = {}): Flow<Int>","description":"io.river.connector.rdbms.jdbc.singleUpdate","location":"connectors/rdbms/jdbc/io.river.connector.rdbms.jdbc/single-update.html","searchKeys":["singleUpdate","fun Jdbc.singleUpdate(sql: String, prepare: suspend PreparedStatement.() -> Unit = {}): Flow<Int>","io.river.connector.rdbms.jdbc.singleUpdate"]},{"name":"inline fun <T : Any> Jdbc.typedQuery(sql: String, fetchSize: Int = 100): Flow<T>","description":"io.river.connector.rdbms.jdbc.typedQuery","location":"connectors/rdbms/jdbc/io.river.connector.rdbms.jdbc/typed-query.html","searchKeys":["typedQuery","inline fun <T : Any> Jdbc.typedQuery(sql: String, fetchSize: Int = 100): Flow<T>","io.river.connector.rdbms.jdbc.typedQuery"]},{"name":"inline fun <T : Any> Jdbc.typedQuery(sql: String, fetchSize: Int = 100, crossinline prepare: suspend PreparedStatement.() -> Unit): Flow<T>","description":"io.river.connector.rdbms.jdbc.typedQuery","location":"connectors/rdbms/jdbc/io.river.connector.rdbms.jdbc/typed-query.html","searchKeys":["typedQuery","inline fun <T : Any> Jdbc.typedQuery(sql: String, fetchSize: Int = 100, crossinline prepare: suspend PreparedStatement.() -> Unit): Flow<T>","io.river.connector.rdbms.jdbc.typedQuery"]},{"name":"object Companion","description":"io.river.connector.rdbms.jdbc.Jdbc.Companion","location":"connectors/rdbms/jdbc/io.river.connector.rdbms.jdbc/-jdbc/-companion/index.html","searchKeys":["Companion","object Companion","io.river.connector.rdbms.jdbc.Jdbc.Companion"]},{"name":"operator fun invoke(url: String, connectionPoolSize: Int = 10, credentials: Pair<String, String>? = null): Jdbc","description":"io.river.connector.rdbms.jdbc.Jdbc.Companion.invoke","location":"connectors/rdbms/jdbc/io.river.connector.rdbms.jdbc/-jdbc/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(url: String, connectionPoolSize: Int = 10, credentials: Pair<String, String>? = null): Jdbc","io.river.connector.rdbms.jdbc.Jdbc.Companion.invoke"]},{"name":"suspend fun close()","description":"io.river.connector.rdbms.jdbc.Jdbc.close","location":"connectors/rdbms/jdbc/io.river.connector.rdbms.jdbc/-jdbc/close.html","searchKeys":["close","suspend fun close()","io.river.connector.rdbms.jdbc.Jdbc.close"]},{"name":"fun S3AsyncClient.download(bucket: String, key: String): Flow<Pair<GetObjectResponse, Flow<ByteArray>>>","description":"io.river.connector.aws.s3.download","location":"connectors/aws/s3/io.river.connector.aws.s3/download.html","searchKeys":["download","fun S3AsyncClient.download(bucket: String, key: String): Flow<Pair<GetObjectResponse, Flow<ByteArray>>>","io.river.connector.aws.s3.download"]},{"name":"fun S3AsyncClient.upload(bucket: String, key: String, upstream: Flow<ByteArray>, parallelism: Int = 1): Flow<S3Response>","description":"io.river.connector.aws.s3.upload","location":"connectors/aws/s3/io.river.connector.aws.s3/upload.html","searchKeys":["upload","fun S3AsyncClient.upload(bucket: String, key: String, upstream: Flow<ByteArray>, parallelism: Int = 1): Flow<S3Response>","io.river.connector.aws.s3.upload"]},{"name":"fun S3AsyncClient.uploadBytes(bucket: String, key: String, upstream: Flow<Byte>, parallelism: Int = 1): Flow<S3Response>","description":"io.river.connector.aws.s3.uploadBytes","location":"connectors/aws/s3/io.river.connector.aws.s3/upload-bytes.html","searchKeys":["uploadBytes","fun S3AsyncClient.uploadBytes(bucket: String, key: String, upstream: Flow<Byte>, parallelism: Int = 1): Flow<S3Response>","io.river.connector.aws.s3.uploadBytes"]},{"name":"BREAK_LINE","description":"io.river.connector.console.Print.BREAK_LINE","location":"connectors/console/io.river.connector.console/-print/-b-r-e-a-k_-l-i-n-e/index.html","searchKeys":["BREAK_LINE","BREAK_LINE","io.river.connector.console.Print.BREAK_LINE"]},{"name":"DEFAULT","description":"io.river.connector.console.OutType.DEFAULT","location":"connectors/console/io.river.connector.console/-out-type/-d-e-f-a-u-l-t/index.html","searchKeys":["DEFAULT","DEFAULT","io.river.connector.console.OutType.DEFAULT"]},{"name":"ERROR","description":"io.river.connector.console.OutType.ERROR","location":"connectors/console/io.river.connector.console/-out-type/-e-r-r-o-r/index.html","searchKeys":["ERROR","ERROR","io.river.connector.console.OutType.ERROR"]},{"name":"NO_BREAK","description":"io.river.connector.console.Print.NO_BREAK","location":"connectors/console/io.river.connector.console/-print/-n-o_-b-r-e-a-k/index.html","searchKeys":["NO_BREAK","NO_BREAK","io.river.connector.console.Print.NO_BREAK"]},{"name":"enum OutType : Enum<OutType> ","description":"io.river.connector.console.OutType","location":"connectors/console/io.river.connector.console/-out-type/index.html","searchKeys":["OutType","enum OutType : Enum<OutType> ","io.river.connector.console.OutType"]},{"name":"enum Print : Enum<Print> ","description":"io.river.connector.console.Print","location":"connectors/console/io.river.connector.console/-print/index.html","searchKeys":["Print","enum Print : Enum<Print> ","io.river.connector.console.Print"]},{"name":"fun <T : Any> Flow<T>.consoleOut(dispatcher: CoroutineDispatcher = Dispatchers.IO.limitedParallelism(1), print: Print = Print.BREAK_LINE, mapper: suspend (T) -> Pair<Any, OutType> = { it to OutType.DEFAULT }): Flow<Pair<Any, OutType>>","description":"io.river.connector.console.consoleOut","location":"connectors/console/io.river.connector.console/console-out.html","searchKeys":["consoleOut","fun <T : Any> Flow<T>.consoleOut(dispatcher: CoroutineDispatcher = Dispatchers.IO.limitedParallelism(1), print: Print = Print.BREAK_LINE, mapper: suspend (T) -> Pair<Any, OutType> = { it to OutType.DEFAULT }): Flow<Pair<Any, OutType>>","io.river.connector.console.consoleOut"]},{"name":"fun consoleIn(dispatcher: CoroutineDispatcher = Dispatchers.IO.limitedParallelism(1)): Flow<String>","description":"io.river.connector.console.consoleIn","location":"connectors/console/io.river.connector.console/console-in.html","searchKeys":["consoleIn","fun consoleIn(dispatcher: CoroutineDispatcher = Dispatchers.IO.limitedParallelism(1)): Flow<String>","io.river.connector.console.consoleIn"]},{"name":"fun valueOf(value: String): OutType","description":"io.river.connector.console.OutType.valueOf","location":"connectors/console/io.river.connector.console/-out-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): OutType","io.river.connector.console.OutType.valueOf"]},{"name":"fun valueOf(value: String): Print","description":"io.river.connector.console.Print.valueOf","location":"connectors/console/io.river.connector.console/-print/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Print","io.river.connector.console.Print.valueOf"]},{"name":"fun values(): Array<OutType>","description":"io.river.connector.console.OutType.values","location":"connectors/console/io.river.connector.console/-out-type/values.html","searchKeys":["values","fun values(): Array<OutType>","io.river.connector.console.OutType.values"]},{"name":"fun values(): Array<Print>","description":"io.river.connector.console.Print.values","location":"connectors/console/io.river.connector.console/-print/values.html","searchKeys":["values","fun values(): Array<Print>","io.river.connector.console.Print.values"]},{"name":"class Credentials(var username: String? = null, var password: String? = null)","description":"io.river.connector.ftp.FtpConfiguration.Credentials","location":"connectors/ftp/io.river.connector.ftp/-ftp-configuration/-credentials/index.html","searchKeys":["Credentials","class Credentials(var username: String? = null, var password: String? = null)","io.river.connector.ftp.FtpConfiguration.Credentials"]},{"name":"class FtpConfiguration(host: String, port: Int, secure: FtpConfiguration.Secure? = null, var credentials: FtpConfiguration.Credentials? = null, var passiveMode: Boolean = false, var binary: Boolean = false)","description":"io.river.connector.ftp.FtpConfiguration","location":"connectors/ftp/io.river.connector.ftp/-ftp-configuration/index.html","searchKeys":["FtpConfiguration","class FtpConfiguration(host: String, port: Int, secure: FtpConfiguration.Secure? = null, var credentials: FtpConfiguration.Credentials? = null, var passiveMode: Boolean = false, var binary: Boolean = false)","io.river.connector.ftp.FtpConfiguration"]},{"name":"class Secure(var protocol: String = \"TLS\", var implicit: Boolean = false)","description":"io.river.connector.ftp.FtpConfiguration.Secure","location":"connectors/ftp/io.river.connector.ftp/-ftp-configuration/-secure/index.html","searchKeys":["Secure","class Secure(var protocol: String = \"TLS\", var implicit: Boolean = false)","io.river.connector.ftp.FtpConfiguration.Secure"]},{"name":"fun Credentials(username: String? = null, password: String? = null)","description":"io.river.connector.ftp.FtpConfiguration.Credentials.Credentials","location":"connectors/ftp/io.river.connector.ftp/-ftp-configuration/-credentials/-credentials.html","searchKeys":["Credentials","fun Credentials(username: String? = null, password: String? = null)","io.river.connector.ftp.FtpConfiguration.Credentials.Credentials"]},{"name":"fun FTPClient.retrieveFileAsFlow(remotePath: String): Flow<Byte>","description":"io.river.connector.ftp.retrieveFileAsFlow","location":"connectors/ftp/io.river.connector.ftp/retrieve-file-as-flow.html","searchKeys":["retrieveFileAsFlow","fun FTPClient.retrieveFileAsFlow(remotePath: String): Flow<Byte>","io.river.connector.ftp.retrieveFileAsFlow"]},{"name":"fun FTPClient.storeFileFromFlow(remotePath: String, content: Flow<ByteArray>): Flow<Unit>","description":"io.river.connector.ftp.storeFileFromFlow","location":"connectors/ftp/io.river.connector.ftp/store-file-from-flow.html","searchKeys":["storeFileFromFlow","fun FTPClient.storeFileFromFlow(remotePath: String, content: Flow<ByteArray>): Flow<Unit>","io.river.connector.ftp.storeFileFromFlow"]},{"name":"fun FtpConfiguration(host: String, port: Int, secure: FtpConfiguration.Secure? = null, credentials: FtpConfiguration.Credentials? = null, passiveMode: Boolean = false, binary: Boolean = false)","description":"io.river.connector.ftp.FtpConfiguration.FtpConfiguration","location":"connectors/ftp/io.river.connector.ftp/-ftp-configuration/-ftp-configuration.html","searchKeys":["FtpConfiguration","fun FtpConfiguration(host: String, port: Int, secure: FtpConfiguration.Secure? = null, credentials: FtpConfiguration.Credentials? = null, passiveMode: Boolean = false, binary: Boolean = false)","io.river.connector.ftp.FtpConfiguration.FtpConfiguration"]},{"name":"fun Secure(protocol: String = \"TLS\", implicit: Boolean = false)","description":"io.river.connector.ftp.FtpConfiguration.Secure.Secure","location":"connectors/ftp/io.river.connector.ftp/-ftp-configuration/-secure/-secure.html","searchKeys":["Secure","fun Secure(protocol: String = \"TLS\", implicit: Boolean = false)","io.river.connector.ftp.FtpConfiguration.Secure.Secure"]},{"name":"fun credentials(f: FtpConfiguration.Credentials.() -> Unit)","description":"io.river.connector.ftp.FtpConfiguration.credentials","location":"connectors/ftp/io.river.connector.ftp/-ftp-configuration/credentials.html","searchKeys":["credentials","fun credentials(f: FtpConfiguration.Credentials.() -> Unit)","io.river.connector.ftp.FtpConfiguration.credentials"]},{"name":"fun download(remotePath: String, configuration: FtpConfiguration): Flow<Byte>","description":"io.river.connector.ftp.Ftp.download","location":"connectors/ftp/io.river.connector.ftp/-ftp/download.html","searchKeys":["download","fun download(remotePath: String, configuration: FtpConfiguration): Flow<Byte>","io.river.connector.ftp.Ftp.download"]},{"name":"fun secure(f: FtpConfiguration.Secure.() -> Unit = {})","description":"io.river.connector.ftp.FtpConfiguration.secure","location":"connectors/ftp/io.river.connector.ftp/-ftp-configuration/secure.html","searchKeys":["secure","fun secure(f: FtpConfiguration.Secure.() -> Unit = {})","io.river.connector.ftp.FtpConfiguration.secure"]},{"name":"fun server(host: String, port: Int = 21, configuration: FtpConfiguration.() -> Unit = { }): FtpConfiguration","description":"io.river.connector.ftp.Ftp.server","location":"connectors/ftp/io.river.connector.ftp/-ftp/server.html","searchKeys":["server","fun server(host: String, port: Int = 21, configuration: FtpConfiguration.() -> Unit = { }): FtpConfiguration","io.river.connector.ftp.Ftp.server"]},{"name":"object Ftp","description":"io.river.connector.ftp.Ftp","location":"connectors/ftp/io.river.connector.ftp/-ftp/index.html","searchKeys":["Ftp","object Ftp","io.river.connector.ftp.Ftp"]},{"name":"suspend fun upload(configuration: FtpConfiguration, remotePath: String, upstream: Flow<ByteArray>)","description":"io.river.connector.ftp.Ftp.upload","location":"connectors/ftp/io.river.connector.ftp/-ftp/upload.html","searchKeys":["upload","suspend fun upload(configuration: FtpConfiguration, remotePath: String, upstream: Flow<ByteArray>)","io.river.connector.ftp.Ftp.upload"]},{"name":"var binary: Boolean = false","description":"io.river.connector.ftp.FtpConfiguration.binary","location":"connectors/ftp/io.river.connector.ftp/-ftp-configuration/binary.html","searchKeys":["binary","var binary: Boolean = false","io.river.connector.ftp.FtpConfiguration.binary"]},{"name":"var credentials: FtpConfiguration.Credentials? = null","description":"io.river.connector.ftp.FtpConfiguration.credentials","location":"connectors/ftp/io.river.connector.ftp/-ftp-configuration/credentials.html","searchKeys":["credentials","var credentials: FtpConfiguration.Credentials? = null","io.river.connector.ftp.FtpConfiguration.credentials"]},{"name":"var implicit: Boolean = false","description":"io.river.connector.ftp.FtpConfiguration.Secure.implicit","location":"connectors/ftp/io.river.connector.ftp/-ftp-configuration/-secure/implicit.html","searchKeys":["implicit","var implicit: Boolean = false","io.river.connector.ftp.FtpConfiguration.Secure.implicit"]},{"name":"var passiveMode: Boolean = false","description":"io.river.connector.ftp.FtpConfiguration.passiveMode","location":"connectors/ftp/io.river.connector.ftp/-ftp-configuration/passive-mode.html","searchKeys":["passiveMode","var passiveMode: Boolean = false","io.river.connector.ftp.FtpConfiguration.passiveMode"]},{"name":"var password: String? = null","description":"io.river.connector.ftp.FtpConfiguration.Credentials.password","location":"connectors/ftp/io.river.connector.ftp/-ftp-configuration/-credentials/password.html","searchKeys":["password","var password: String? = null","io.river.connector.ftp.FtpConfiguration.Credentials.password"]},{"name":"var protocol: String","description":"io.river.connector.ftp.FtpConfiguration.Secure.protocol","location":"connectors/ftp/io.river.connector.ftp/-ftp-configuration/-secure/protocol.html","searchKeys":["protocol","var protocol: String","io.river.connector.ftp.FtpConfiguration.Secure.protocol"]},{"name":"var username: String? = null","description":"io.river.connector.ftp.FtpConfiguration.Credentials.username","location":"connectors/ftp/io.river.connector.ftp/-ftp-configuration/-credentials/username.html","searchKeys":["username","var username: String? = null","io.river.connector.ftp.FtpConfiguration.Credentials.username"]},{"name":"fun <T> Connection.singleUpdate(sql: String, upstream: Flow<T>, parallelism: Int = 1, prepare: Statement.(T) -> Unit = {}): Flow<Long>","description":"io.river.connector.rdbms.r2dbc.singleUpdate","location":"connectors/rdbms/r2dbc/io.river.connector.rdbms.r2dbc/single-update.html","searchKeys":["singleUpdate","fun <T> Connection.singleUpdate(sql: String, upstream: Flow<T>, parallelism: Int = 1, prepare: Statement.(T) -> Unit = {}): Flow<Long>","io.river.connector.rdbms.r2dbc.singleUpdate"]},{"name":"fun Connection.query(sql: String): Flow<ResultRow>","description":"io.river.connector.rdbms.r2dbc.query","location":"connectors/rdbms/r2dbc/io.river.connector.rdbms.r2dbc/query.html","searchKeys":["query","fun Connection.query(sql: String): Flow<ResultRow>","io.river.connector.rdbms.r2dbc.query"]},{"name":"fun Connection.singleUpdate(sql: String): Flow<Long>","description":"io.river.connector.rdbms.r2dbc.singleUpdate","location":"connectors/rdbms/r2dbc/io.river.connector.rdbms.r2dbc/single-update.html","searchKeys":["singleUpdate","fun Connection.singleUpdate(sql: String): Flow<Long>","io.river.connector.rdbms.r2dbc.singleUpdate"]},{"name":"fun <T> Flow<T>.asSendEmailRequest(f: SendEmailRequest.Builder.(T) -> Unit): Flow<SendEmailRequest>","description":"io.river.connector.aws.sqs.asSendEmailRequest","location":"connectors/aws/ses/io.river.connector.aws.sqs/as-send-email-request.html","searchKeys":["asSendEmailRequest","fun <T> Flow<T>.asSendEmailRequest(f: SendEmailRequest.Builder.(T) -> Unit): Flow<SendEmailRequest>","io.river.connector.aws.sqs.asSendEmailRequest"]},{"name":"fun SesV2AsyncClient.sendEmailFlow(upstream: Flow<SendEmailRequest>, parallelism: Int = 1): Flow<SendEmailResponse>","description":"io.river.connector.aws.sqs.sendEmailFlow","location":"connectors/aws/ses/io.river.connector.aws.sqs/send-email-flow.html","searchKeys":["sendEmailFlow","fun SesV2AsyncClient.sendEmailFlow(upstream: Flow<SendEmailRequest>, parallelism: Int = 1): Flow<SendEmailResponse>","io.river.connector.aws.sqs.sendEmailFlow"]},{"name":"fun <T : Any> MongoCollection<T>.findAsFlow(): Flow<T>","description":"io.river.connector.mongodb.findAsFlow","location":"connectors/mongodb/io.river.connector.mongodb/find-as-flow.html","searchKeys":["findAsFlow","fun <T : Any> MongoCollection<T>.findAsFlow(): Flow<T>","io.river.connector.mongodb.findAsFlow"]},{"name":"fun <T : Any> MongoCollection<T>.findAsFlow(query: Bson): Flow<T>","description":"io.river.connector.mongodb.findAsFlow","location":"connectors/mongodb/io.river.connector.mongodb/find-as-flow.html","searchKeys":["findAsFlow","fun <T : Any> MongoCollection<T>.findAsFlow(query: Bson): Flow<T>","io.river.connector.mongodb.findAsFlow"]},{"name":"fun <T> MongoCollection<T>.insert(flow: Flow<T>, parallelism: Int = 1): Flow<InsertOneResult>","description":"io.river.connector.mongodb.insert","location":"connectors/mongodb/io.river.connector.mongodb/insert.html","searchKeys":["insert","fun <T> MongoCollection<T>.insert(flow: Flow<T>, parallelism: Int = 1): Flow<InsertOneResult>","io.river.connector.mongodb.insert"]},{"name":"fun <T> MongoCollection<T>.insertMany(flow: Flow<T>, parallelism: Int = 1, options: InsertManyOptions = InsertManyOptions(), chunkStrategy: ChunkStrategy = ChunkStrategy.TimeWindow(10, 500.milliseconds)): Flow<InsertManyResult>","description":"io.river.connector.mongodb.insertMany","location":"connectors/mongodb/io.river.connector.mongodb/insert-many.html","searchKeys":["insertMany","fun <T> MongoCollection<T>.insertMany(flow: Flow<T>, parallelism: Int = 1, options: InsertManyOptions = InsertManyOptions(), chunkStrategy: ChunkStrategy = ChunkStrategy.TimeWindow(10, 500.milliseconds)): Flow<InsertManyResult>","io.river.connector.mongodb.insertMany"]},{"name":"fun <T> MongoCollection<T>.replace(flow: Flow<Pair<Bson, T>>, parallelism: Int = 1): Flow<UpdateResult>","description":"io.river.connector.mongodb.replace","location":"connectors/mongodb/io.river.connector.mongodb/replace.html","searchKeys":["replace","fun <T> MongoCollection<T>.replace(flow: Flow<Pair<Bson, T>>, parallelism: Int = 1): Flow<UpdateResult>","io.river.connector.mongodb.replace"]},{"name":"fun <T> MongoCollection<T>.replace(flow: Flow<T>, filter: Bson, parallelism: Int = 1): Flow<UpdateResult>","description":"io.river.connector.mongodb.replace","location":"connectors/mongodb/io.river.connector.mongodb/replace.html","searchKeys":["replace","fun <T> MongoCollection<T>.replace(flow: Flow<T>, filter: Bson, parallelism: Int = 1): Flow<UpdateResult>","io.river.connector.mongodb.replace"]},{"name":"fun MongoCollection<Document>.update(flow: Flow<Document>, filter: Bson, parallelism: Int = 1): Flow<UpdateResult>","description":"io.river.connector.mongodb.update","location":"connectors/mongodb/io.river.connector.mongodb/update.html","searchKeys":["update","fun MongoCollection<Document>.update(flow: Flow<Document>, filter: Bson, parallelism: Int = 1): Flow<UpdateResult>","io.river.connector.mongodb.update"]},{"name":"fun MongoCollection<Document>.updateMany(flow: Flow<Document>, filter: Bson, parallelism: Int = 1, chunkStrategy: ChunkStrategy = ChunkStrategy.TimeWindow(10, 500.milliseconds)): Flow<UpdateResult>","description":"io.river.connector.mongodb.updateMany","location":"connectors/mongodb/io.river.connector.mongodb/update-many.html","searchKeys":["updateMany","fun MongoCollection<Document>.updateMany(flow: Flow<Document>, filter: Bson, parallelism: Int = 1, chunkStrategy: ChunkStrategy = ChunkStrategy.TimeWindow(10, 500.milliseconds)): Flow<UpdateResult>","io.river.connector.mongodb.updateMany"]},{"name":"fun <T> Flow<T>.toJson(objectMapper: ObjectMapper = defaultObjectMapper): Flow<JsonNode>","description":"io.river.connector.format.json.toJson","location":"connectors/format/json/io.river.connector.format.json/to-json.html","searchKeys":["toJson","fun <T> Flow<T>.toJson(objectMapper: ObjectMapper = defaultObjectMapper): Flow<JsonNode>","io.river.connector.format.json.toJson"]},{"name":"fun <T> Flow<T>.toJsonString(pretty: Boolean = false, objectMapper: ObjectMapper = defaultObjectMapper): Flow<String>","description":"io.river.connector.format.json.toJsonString","location":"connectors/format/json/io.river.connector.format.json/to-json-string.html","searchKeys":["toJsonString","fun <T> Flow<T>.toJsonString(pretty: Boolean = false, objectMapper: ObjectMapper = defaultObjectMapper): Flow<String>","io.river.connector.format.json.toJsonString"]},{"name":"fun Flow<ByteArray>.rootJsonNodes(objectMapper: ObjectMapper = defaultObjectMapper): Flow<JsonNode>","description":"io.river.connector.format.json.rootJsonNodes","location":"connectors/format/json/io.river.connector.format.json/root-json-nodes.html","searchKeys":["rootJsonNodes","fun Flow<ByteArray>.rootJsonNodes(objectMapper: ObjectMapper = defaultObjectMapper): Flow<JsonNode>","io.river.connector.format.json.rootJsonNodes"]},{"name":"inline fun <T> Flow<JsonNode>.fromJson(objectMapper: ObjectMapper = defaultObjectMapper): Flow<T>","description":"io.river.connector.format.json.fromJson","location":"connectors/format/json/io.river.connector.format.json/from-json.html","searchKeys":["fromJson","inline fun <T> Flow<JsonNode>.fromJson(objectMapper: ObjectMapper = defaultObjectMapper): Flow<T>","io.river.connector.format.json.fromJson"]},{"name":"inline fun <T> Flow<String>.fromJsonString(objectMapper: ObjectMapper = defaultObjectMapper): Flow<T>","description":"io.river.connector.format.json.fromJsonString","location":"connectors/format/json/io.river.connector.format.json/from-json-string.html","searchKeys":["fromJsonString","inline fun <T> Flow<String>.fromJsonString(objectMapper: ObjectMapper = defaultObjectMapper): Flow<T>","io.river.connector.format.json.fromJsonString"]},{"name":"val defaultObjectMapper: ObjectMapper","description":"io.river.connector.format.json.defaultObjectMapper","location":"connectors/format/json/io.river.connector.format.json/default-object-mapper.html","searchKeys":["defaultObjectMapper","val defaultObjectMapper: ObjectMapper","io.river.connector.format.json.defaultObjectMapper"]},{"name":"class Java11HttpClient(httpClient: HttpClient, scope: CoroutineScope) : SdkAsyncHttpClient","description":"io.river.connector.aws.Java11HttpClient","location":"connectors/aws/java-11-http-spi/io.river.connector.aws/-java11-http-client/index.html","searchKeys":["Java11HttpClient","class Java11HttpClient(httpClient: HttpClient, scope: CoroutineScope) : SdkAsyncHttpClient","io.river.connector.aws.Java11HttpClient"]},{"name":"class Java11HttpClientBuilder(httpClient: HttpClient? = null, scope: CoroutineScope? = null) : SdkAsyncHttpClient.Builder<Java11HttpClientBuilder> ","description":"io.river.connector.aws.Java11HttpClientBuilder","location":"connectors/aws/java-11-http-spi/io.river.connector.aws/-java11-http-client-builder/index.html","searchKeys":["Java11HttpClientBuilder","class Java11HttpClientBuilder(httpClient: HttpClient? = null, scope: CoroutineScope? = null) : SdkAsyncHttpClient.Builder<Java11HttpClientBuilder> ","io.river.connector.aws.Java11HttpClientBuilder"]},{"name":"class Java11HttpClientService : SdkAsyncHttpService","description":"io.river.connector.aws.Java11HttpClientService","location":"connectors/aws/java-11-http-spi/io.river.connector.aws/-java11-http-client-service/index.html","searchKeys":["Java11HttpClientService","class Java11HttpClientService : SdkAsyncHttpService","io.river.connector.aws.Java11HttpClientService"]},{"name":"fun Java11HttpClient(httpClient: HttpClient, scope: CoroutineScope)","description":"io.river.connector.aws.Java11HttpClient.Java11HttpClient","location":"connectors/aws/java-11-http-spi/io.river.connector.aws/-java11-http-client/-java11-http-client.html","searchKeys":["Java11HttpClient","fun Java11HttpClient(httpClient: HttpClient, scope: CoroutineScope)","io.river.connector.aws.Java11HttpClient.Java11HttpClient"]},{"name":"fun Java11HttpClientBuilder(httpClient: HttpClient? = null, scope: CoroutineScope? = null)","description":"io.river.connector.aws.Java11HttpClientBuilder.Java11HttpClientBuilder","location":"connectors/aws/java-11-http-spi/io.river.connector.aws/-java11-http-client-builder/-java11-http-client-builder.html","searchKeys":["Java11HttpClientBuilder","fun Java11HttpClientBuilder(httpClient: HttpClient? = null, scope: CoroutineScope? = null)","io.river.connector.aws.Java11HttpClientBuilder.Java11HttpClientBuilder"]},{"name":"fun Java11HttpClientService()","description":"io.river.connector.aws.Java11HttpClientService.Java11HttpClientService","location":"connectors/aws/java-11-http-spi/io.river.connector.aws/-java11-http-client-service/-java11-http-client-service.html","searchKeys":["Java11HttpClientService","fun Java11HttpClientService()","io.river.connector.aws.Java11HttpClientService.Java11HttpClientService"]},{"name":"fun buildDefault(): SdkAsyncHttpClient","description":"io.river.connector.aws.Java11HttpClient.Companion.buildDefault","location":"connectors/aws/java-11-http-spi/io.river.connector.aws/-java11-http-client/-companion/build-default.html","searchKeys":["buildDefault","fun buildDefault(): SdkAsyncHttpClient","io.river.connector.aws.Java11HttpClient.Companion.buildDefault"]},{"name":"fun builder(): Java11HttpClientBuilder","description":"io.river.connector.aws.Java11HttpClient.Companion.builder","location":"connectors/aws/java-11-http-spi/io.river.connector.aws/-java11-http-client/-companion/builder.html","searchKeys":["builder","fun builder(): Java11HttpClientBuilder","io.river.connector.aws.Java11HttpClient.Companion.builder"]},{"name":"fun withCoroutineScope(scope: CoroutineScope): Java11HttpClientBuilder","description":"io.river.connector.aws.Java11HttpClientBuilder.withCoroutineScope","location":"connectors/aws/java-11-http-spi/io.river.connector.aws/-java11-http-client-builder/with-coroutine-scope.html","searchKeys":["withCoroutineScope","fun withCoroutineScope(scope: CoroutineScope): Java11HttpClientBuilder","io.river.connector.aws.Java11HttpClientBuilder.withCoroutineScope"]},{"name":"fun withHttpClient(httpClient: HttpClient): Java11HttpClientBuilder","description":"io.river.connector.aws.Java11HttpClientBuilder.withHttpClient","location":"connectors/aws/java-11-http-spi/io.river.connector.aws/-java11-http-client-builder/with-http-client.html","searchKeys":["withHttpClient","fun withHttpClient(httpClient: HttpClient): Java11HttpClientBuilder","io.river.connector.aws.Java11HttpClientBuilder.withHttpClient"]},{"name":"object Companion","description":"io.river.connector.aws.Java11HttpClient.Companion","location":"connectors/aws/java-11-http-spi/io.river.connector.aws/-java11-http-client/-companion/index.html","searchKeys":["Companion","object Companion","io.river.connector.aws.Java11HttpClient.Companion"]},{"name":"open override fun buildWithDefaults(serviceDefaults: AttributeMap): SdkAsyncHttpClient","description":"io.river.connector.aws.Java11HttpClientBuilder.buildWithDefaults","location":"connectors/aws/java-11-http-spi/io.river.connector.aws/-java11-http-client-builder/build-with-defaults.html","searchKeys":["buildWithDefaults","open override fun buildWithDefaults(serviceDefaults: AttributeMap): SdkAsyncHttpClient","io.river.connector.aws.Java11HttpClientBuilder.buildWithDefaults"]},{"name":"open override fun close()","description":"io.river.connector.aws.Java11HttpClient.close","location":"connectors/aws/java-11-http-spi/io.river.connector.aws/-java11-http-client/close.html","searchKeys":["close","open override fun close()","io.river.connector.aws.Java11HttpClient.close"]},{"name":"open override fun createAsyncHttpClientFactory(): SdkAsyncHttpClient.Builder<*>","description":"io.river.connector.aws.Java11HttpClientService.createAsyncHttpClientFactory","location":"connectors/aws/java-11-http-spi/io.river.connector.aws/-java11-http-client-service/create-async-http-client-factory.html","searchKeys":["createAsyncHttpClientFactory","open override fun createAsyncHttpClientFactory(): SdkAsyncHttpClient.Builder<*>","io.river.connector.aws.Java11HttpClientService.createAsyncHttpClientFactory"]},{"name":"open override fun execute(asyncExecuteRequest: AsyncExecuteRequest): CompletableFuture<Void?>","description":"io.river.connector.aws.Java11HttpClient.execute","location":"connectors/aws/java-11-http-spi/io.river.connector.aws/-java11-http-client/execute.html","searchKeys":["execute","open override fun execute(asyncExecuteRequest: AsyncExecuteRequest): CompletableFuture<Void?>","io.river.connector.aws.Java11HttpClient.execute"]}]